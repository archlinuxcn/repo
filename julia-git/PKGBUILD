# Maintainer: Yichao Yu <yyc1992@gmail.com>
# Contributor: Lex Black <autumn-wind at web dot de>
# Contributor: Michael Jakl <jakl.michael@gmail.com>
# With contributions from many kind people at https://aur.archlinux.org/packages/julia-git/

BUILD_DOC=1

pkgbase=julia-git
if [[ $CARCH = x86_64 ]]; then
    pkgname=('julia-git' 'julia-git-avx2')
else
    pkgname=('julia-git')
fi

if [[ $CARCH != x86_64 ]]; then
    BUILD_DOC=0
fi

if ((BUILD_DOC)); then
    pkgname+=('julia-git-docs')
fi

case $CARCH in
  x86_64|i686)
    makedepends_llvm=("llvm=3.9.1")
    depends_llvm=("llvm-libs=3.9.1")
    ;;
  armv7h|aarch64)
    makedepends_llvm=("llvm-svn")
    depends_llvm=("llvm-libs-svn")
    ;;
  *)
    echo "Unsupported Arch \"$CARCH\"" >&2
    ;;
esac

epoch=1
pkgver=0.6.0.dev.1738.g309657f69c
pkgrel=1
pkgdesc="Julia is a high-level, high-performance, dynamic programming language."
arch=('any' 'i686' 'x86_64' 'armv7h' 'aarch64')
url="http://julialang.org"
license=('GPL')
makedepends=(gcc-fortran arpack fftw git gmp libgit2-julia libunwind-git
             "${makedepends_llvm[@]}" mpfr pcre2 suitesparse
             openspecfun openblas libutf8proc-git patchelf openblas-lapack
             openlibm mbedtls libssh2)
options=('debug' '!strip')
source=('git://github.com/JuliaLang/julia')
md5sums=('SKIP')

pkgver() {
  cd julia

  last_tag=$(git describe --tags --abbrev=0)

  #collect the contents
  commit_short=$(git rev-parse --short HEAD)
  verchanged=$(git blame -L ,1 -sl -- VERSION | cut -f 1 -d " ")
  build_number=$(git rev-list --count HEAD "^$verchanged")
  # Combine version from VERSION file with rev-count and latest commit
  printf "%s.%s.g%s" "$(git show HEAD:VERSION | sed 's/-/./g')" \
         "$build_number" "$commit_short"
}

julia_opts=(prefix=/usr sysconfdir=/etc
            USE_SYSTEM_LLVM=1
            USE_SYSTEM_OPENLIBM=1
            USE_SYSTEM_LIBUNWIND=1
            USE_SYSTEM_PCRE=1
            USE_SYSTEM_OPENSPECFUN=1
            USE_SYSTEM_BLAS=1
            USE_SYSTEM_LAPACK=1
            USE_SYSTEM_FFTW=1
            USE_SYSTEM_GMP=1
            USE_SYSTEM_MPFR=1
            USE_SYSTEM_ARPACK=1
            USE_SYSTEM_SUITESPARSE=1
            USE_SYSTEM_UTF8PROC=1
            USE_SYSTEM_LIBGIT2=1
            USE_SYSTEM_LIBSSH2=1
            USE_SYSTEM_MBEDTLS=1
            USE_SYSTEM_CURL=1
            USE_SYSTEM_PATCHELF=1
            USE_LLVM_SHLIB=1
            LLVM_USE_CMAKE=0 # Workaround LLVM linking with system LLVM
            LIBBLASNAME=libopenblas
            LIBBLAS=-lopenblas
            LIBLAPACKNAME=libopenblas
            LIBLAPACK=-lopenblas)

_FLTO='-flto'

case "$CARCH" in
  x86_64)
    julia_avx2_opts=("${julia_opts[@]}" MARCH=x86-64 JULIA_CPU_TARGET=core-avx2)
    julia_opts=("${julia_opts[@]}" MARCH=x86-64 JULIA_CPU_TARGET=x86-64)
    ;;
  i686)
    julia_opts=("${julia_opts[@]}" MARCH=pentium4 JULIA_CPU_TARGET=pentium4)
    ;;
  aarch64)
    julia_opts=("${julia_opts[@]}" MARCH=armv8-a JULIA_CPU_TARGET=cortex-a57)
    # GCC 6.1.1 internal error
    _FLTO=''
    ;;
  armv7h)
    julia_opts=("${julia_opts[@]}" MARCH=armv7-a JULIA_CPU_TARGET=cortex-a9)
    ;;
esac

prepare() {
  rm -rf bin/
  mkdir -p bin/

  for p in cc c++ gcc g++; do
    cat > bin/$p <<EOF
exec /usr/bin/$p $_FLTO "\${@/#-O0/-Og}" -fasynchronous-unwind-tables
EOF
    chmod +x bin/$p
  done

  rm -rf julia-avx2
  cd julia

  git reset --hard HEAD
  git clean -fdx

  # patch -Np1 < ../

  if [[ "$CARCH" = x86_64 ]]; then
      (cd "$srcdir"
       cp -a julia julia-avx2)
  fi
}

build_in() {
  cd "$1"

  opts=("${@:3}")
  export PATH="${srcdir}/bin:${PATH}"
  CFLAGS=${CFLAGS//-march=i686/-march=pentium4}
  CXXFLAGS=${CXXFLAGS//-march=i686/-march=pentium4}
  export CFLAGS+=' -Wno-pedantic -Wno-clobbered'
  export CXXFLAGS+=' -Wno-pedantic -Wno-clobbered'

  make "${opts[@]}" -C base version_git.jl.phony
  make "${opts[@]}" -C deps
  make "${opts[@]}" julia-ui-release
  if (($2)); then
      make "${opts[@]}" release debug docs
  else
      make "${opts[@]}" release debug
  fi

  # Check to detect issues like JuliaLang/julia#13820
  usr/bin/julia -e '0'
  usr/bin/julia-debug -e '0'
}

build() {
  if [[ "$CARCH" = x86_64 ]]; then
      (build_in julia-avx2 0 "${julia_avx2_opts[@]}")
  fi
  (build_in julia $BUILD_DOC "${julia_opts[@]}")
}

package-julia-in() {
  arch=('i686' 'x86_64' 'armv7h' 'aarch64')
  depends=(arpack fftw gmp libgit2-julia libunwind-git "${depends_llvm[@]}"
           mpfr pcre2 hicolor-icon-theme xdg-utils suitesparse
           openspecfun openblas libutf8proc-git openblas-lapack openlibm
           mbedtls libssh2)
  conflicts=('julia')
  opts=("${@:2}")

  cd "$1"

  make install DESTDIR="$pkgdir" "${opts[@]}"

  # Remove doc files
  rm -r "$pkgdir/usr/share/doc/julia"

  ver=$("$pkgdir/usr/bin/julia" \
            --startup-file=no \
            -e 'print(VERSION.major, ".", VERSION.minor, ".", VERSION.patch)')

  provides=("julia=2:$ver")
}

package_julia-git() {
  package-julia-in julia "${julia_opts[@]}"
}

package_julia-git-avx2() {
  package-julia-in julia-avx2 "${julia_avx2_opts[@]}"
}

package_julia-git-docs() {
  arch=('any')
  pkgdesc+=" (Documents)"
  provides=('julia-docs' 'julia-doc')
  conflicts=('julia-docs' 'julia-doc' 'julia-git-doc' 'julia-doc-git')
  replaces=('julia-git-doc' 'julia-doc-git')

  cd julia/doc/_build

  mkdir -p "$pkgdir"/usr/share/doc/julia/
  cp -dpr --no-preserve=ownership html "$pkgdir"/usr/share/doc/julia/
}
