From be942fcb001441d1999dcfb73e6d579ef06a180f Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Fri, 24 Oct 2025 17:45:57 -0400
Subject: [PATCH 12/12] Revert "Docs: Make @doc macro return the value of
 documented expression"

This reverts commit 1a07c92a1eadf7de66a3fcb5eaed48de8e8c0984.
---
 base/docs/Docs.jl | 28 ++++++----------------------
 1 file changed, 6 insertions(+), 22 deletions(-)

diff --git a/base/docs/Docs.jl b/base/docs/Docs.jl
index eec5fd3fd1..470aeb098c 100644
--- a/base/docs/Docs.jl
+++ b/base/docs/Docs.jl
@@ -396,22 +396,8 @@ function objectdoc(__source__, __module__, str, def, expr, sig = :(Union{}))
     @nospecialize str def expr sig
     binding = esc(bindingexpr(namify(expr)))
     docstr  = esc(docexpr(__source__, __module__, lazy_iterpolate(str), metadata(__source__, __module__, expr, false)))
-    # Store the result of the definition and return it after documenting
-    docex = :($(doc!)($__module__, $binding, $docstr, $(esc(sig))))
-    if def === nothing
-        return Expr(:block, docex)
-    else
-        exdef = esc(def)
-        if isexpr(def, :global, 1) && def.args[1] isa Union{Symbol,GlobalRef}
-            # Special case: `global x` should return nothing to avoid syntax errors with assigning to a value
-            val = nothing
-        else
-            val = :val
-            exdef = Expr(:(=), val, exdef)
-        end
-        # Note: we want to avoid introducing line number nodes here (issue #24468) for def
-        return Expr(:block, exdef, docex, val)
-    end
+    # Note: we want to avoid introducing line number nodes here (issue #24468)
+    return Expr(:block, esc(def), :($(doc!)($__module__, $binding, $docstr, $(esc(sig)))))
 end
 
 function calldoc(__source__, __module__, str, def::Expr)
@@ -445,9 +431,7 @@ function moduledoc(__source__, __module__, meta, def, defâ€²::Expr)
     end
 end
 
-# Shares a single doc, `meta`, between several expressions from the tuple expression `ex`
-# (but don't actually create the tuple for the result and just return the final one,
-# as if this was a C++ comma operator or a block separated by `;` instead of `,`).
+# Shares a single doc, `meta`, between several expressions from the tuple expression `ex`.
 function multidoc(__source__, __module__, meta, ex::Expr, define::Bool)
     @nospecialize meta
     out = Expr(:block)
@@ -673,7 +657,7 @@ docm(source::LineNumberNode, mod::Module, _, _, x...) = docm(source, mod, x...)
 # also part of a :where expression, so it unwraps the :where layers until it reaches the
 # "actual" expression
 iscallexpr(ex::Expr) = isexpr(ex, :where) ? iscallexpr(ex.args[1]) : isexpr(ex, :call)
-iscallexpr(@nospecialize ex) = false
+iscallexpr(ex) = false
 
 function docm(source::LineNumberNode, mod::Module, meta, ex, define::Bool = true)
     @nospecialize meta ex
@@ -738,7 +722,7 @@ function _docm(source::LineNumberNode, mod::Module, meta, x, define::Bool = true
     #   f(::T, ::U) where T where U
     #
     isexpr(x, FUNC_HEADS) && is_signature((x::Expr).args[1]) ? objectdoc(source, mod, meta, def, x::Expr, signature(x::Expr)) :
-    (isexpr(x, :function) || isexpr(x, :macro)) && !isexpr((x::Expr).args[1], :call) ? objectdoc(source, mod, meta, def, x::Expr) :
+    isexpr(x, [:function, :macro])  && !isexpr((x::Expr).args[1], :call) ? objectdoc(source, mod, meta, def, x::Expr) :
     iscallexpr(x) ? calldoc(source, mod, meta, x::Expr) :
 
     # Type definitions.
@@ -758,7 +742,7 @@ function _docm(source::LineNumberNode, mod::Module, meta, x, define::Bool = true
     isexpr(x, BINDING_HEADS) && !isexpr((x::Expr).args[1], :call) ? objectdoc(source, mod, meta, def, x::Expr) :
 
     # Quoted macrocall syntax. `:@time` / `:(Base.@time)`.
-    isquotedmacrocall(x) ? objectdoc(source, mod, meta, nothing, x) :
+    isquotedmacrocall(x) ? objectdoc(source, mod, meta, def, x) :
     # Modules and baremodules.
     isexpr(x, :module) ? moduledoc(source, mod, meta, def, x::Expr) :
     # Document several expressions with the same docstring. `a, b, c`.
-- 
2.51.0

