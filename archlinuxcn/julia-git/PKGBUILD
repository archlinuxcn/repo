# Maintainer: Yichao Yu <yyc1992@gmail.com>
# Contributor: Lex Black <autumn-wind at web dot de>
# Contributor: Michael Jakl <jakl.michael@gmail.com>
# With contributions from many kind people at https://aur.archlinux.org/packages/julia-git/

BUILD_DOC=1

pkgbase=julia-git
pkgname=(julia-git julia-git-package-env)

if [[ $CARCH != x86_64 ]]; then
  BUILD_DOC=0
fi

if ((BUILD_DOC)); then
  pkgname+=('julia-git-docs')
fi

case "$CARCH" in
  x86_64)
    _soarch=64
    ;;
  i686)
    _soarch=32
    ;;
  aarch64)
    _soarch=64
    ;;
  armv7h)
    _soarch=32
    ;;
esac

epoch=1
pkgver=1.13.0.DEV.592.g2c2114ceed8
pkgrel=2
pkgdesc="Julia is a high-level, high-performance, dynamic programming language."
arch=('i686' 'x86_64' 'armv7h' 'aarch64')
url="http://julialang.org"
license=('GPL')
_soname_deps=(libcurl.so libgit2.so libopenlibm.so libssh2.so libcrypto.so libssl.so)
depends_libs=(arpack fftw gmp libunwind mpfr pcre2 suitesparse
              openspecfun libutf8proc libblastrampoline
              openssl zlib 7zip libnghttp2 ca-certificates-utils lld
              blas-openblas)
case "$CARCH" in
  x86_64)
    depends_libs=("${depends_libs[@]}" openblas64-git blas64-openblas)
    ;;
  aarch64)
    depends_libs=("${depends_libs[@]}" openblas64-git blas64-openblas)
    ;;
  i686)
    depends_libs=("${depends_libs[@]}" openblas-git)
    ;;
  armv7h)
    depends_libs=("${depends_libs[@]}" openblas-git)
    ;;
esac
makedepends=("${depends_libs[@]}" llvm-julia-git gcc-fortran git patchelf python proot
             "${_soname_deps[@]}")
# Both debug and strip cause pacman to edit the ELF files and breaking them
# for loading.
options=('!debug' '!strip' '!buildflags')
_patches=(
  0001-Force-enable-GDB-debug-info-registration.patch
  0002-Fix-source-file-paths.patch
  0003-Clear-soname.patch
  0004-Revert-to-hard-code-system-lib-path.patch
  0005-Support-loading-extensions-from-STDLIB.patch
  0006-julia-git-add-a-safeguard-for-bad-unwinding.patch
  0007-Disable-per-thread-TLS-cache-for-now.patch
  0008-Disable-UCX-signal-handler.patch
)
source=('git+https://github.com/JuliaLang/julia'
        'git+https://github.com/yuyichao/archcn-julia-scripts'
        "${_patches[@]}"
        arch-source-translate.cpp
        sysp7z.diff
        download_curl.diff)
sha512sums=('SKIP'
            'SKIP'
            '7dc0f04ea78103dc4c9d20a94cf3f77caa2eba2f7f340b077e39a39d6848dbd2bb77bb7e5d4731f1271ca79303465431d63be2c5a0e57b45392a545bce091849'
            '7f0af8befdaaf4cbf16f504efc26e54916ea354f58593265490218d096cbe738057e9acf6cb5acc21a198d1f34d4d0ceefafde403dd8547156e8c3edcad3ff8f'
            '2a6b6abd1ce705ea5ca759e2744a4dc6700847d8b69db7bfa8cd51f03682348a13b3ebb7e43c88acb5b84f4f8ac0e8e4b63d2153ae0029777506acdc3fac96e9'
            '5391e55de20ccf6ccb5c754bb17dce31f5aa54c3589b7d290677cc2f4ed51b12c8d8ba599a5e779c58da2fe7822752a66890420d317320f60284f199385434d9'
            '65416de6ed205890624c4a7bb218c595c117eca0e6f3a3aa4a95995151bf5536d1744c9784e4ba74a13c462bf83248c99cd2e78bf4c35ba992e64045beb90ed7'
            'f53fbe819ce9d96e96375f046ac89c5144ba5ce8bedbc31d7837a4322b246a78a2e2b5a846f06d133b72bced7eb3b68f99ae5817edfa7cb8cf9624d89c50b924'
            'f83052f5c477a91b66fd8ba8129a63cbf5ba8f9b773c2f253da4360b1377700aa1204de2447a05199724fe632b5782a613473bf6445775294c68eb7078e66c45'
            '0fe6b2ab1ed242097839dbae545e6d2894cd824a7e7d0482c78edfef4c7c43617e8eb8b2d3923c312e757acee9166fc8cd3a756d31d411256b1002a87607227c'
            'c2da7461c53e56293d35581cb4aa2500ef9a98e52a354bfa9271f44bd768ed77c5b362e304e0ab467fb286d2198f3e28cf91089e8773ebcfc85e294223a12f0e'
            '79012833348654947f6b045e2ab5aa0a155aadbc1fd9e034c04456ce13acccdbbd2d3e6389daa2e4644c979b1f7ccea41afb0d54c1719b1b681f68fcb6006849'
            '5be40dcb72428885c06c8353019bd8fac0ea186a7536cf2bab2554d2724fb3d4a5b0b3f61727428e5cf7906f14a213f08dcb238b5bd10d408d86669e2c93ca78')

_versioned_llvm=

pkgver() {
  cd julia

  last_tag=$(git describe --tags --abbrev=0)

  #collect the contents
  commit_short=$(git rev-parse --short HEAD)
  verchanged=$(git blame -L ,1 -sl -- VERSION | cut -f 1 -d " ")
  build_number=$(git rev-list --count HEAD "^$verchanged")
  # Combine version from VERSION file with rev-count and latest commit
  printf "%s.%s.g%s" "$(git show HEAD:VERSION | sed 's/-/./g')" \
         "$build_number" "$commit_short"
}

_LLVM_CONFIG=llvm-config
if [[ -n $_versioned_llvm ]]; then
  _LLVM_CONFIG=llvm-config-${_versioned_llvm}
fi

julia_opts=(prefix=/usr sysconfdir=/etc
            USE_SYSTEM_LIBWHICH=0
            USE_SYSTEM_CSL=1
            USE_SYSTEM_LLVM=1
            USE_SYSTEM_LIBUNWIND=1
            USE_SYSTEM_PCRE=1
            USE_SYSTEM_OPENLIBM=1
            USE_SYSTEM_BLAS=1
            USE_SYSTEM_LAPACK=1
            USE_SYSTEM_GMP=1
            USE_SYSTEM_MPFR=1
            USE_SYSTEM_LIBSUITESPARSE=1
            USE_SYSTEM_LIBBLASTRAMPOLINE=1
            USE_SYSTEM_UTF8PROC=1
            USE_SYSTEM_OPENSSL=1
            USE_SYSTEM_LIBSSH2=1
            USE_SYSTEM_NGHTTP2=1
            USE_SYSTEM_CURL=1
            USE_SYSTEM_LIBGIT2=1
            USE_SYSTEM_PATCHELF=1
            USE_SYSTEM_ZLIB=1
            USE_SYSTEM_ZSTD=1
            USE_SYSTEM_P7ZIP=1
            USE_SYSTEM_LLD=1
            USE_INTEL_JITEVENTS=0
            USE_LLVM_SHLIB=1
            USE_BINARYBUILDER=0
            WITH_TERMINFO=0
            LLVM_USE_CMAKE=0 # Workaround LLVM linking with system LLVM
            LLVM_CONFIG=${_LLVM_CONFIG})

_x86_target='generic,opt_size;haswell,clone_all,-rdrnd;skylake,base(1),-rdrnd,-rdseed,-rtm;cannonlake,base(1),-rdrnd,-rdseed,-rtm'
_arm_target='armv7-a;armv7-a,neon;armv7-a,neon,vfp4'
_aa64_target='generic;armv8.2-a;apple-m1,clone_all'

case "$CARCH" in
  x86_64)
    _cpu_target="${_x86_target}"
    julia_opts=("${julia_opts[@]}" MARCH=x86-64
                USE_BLAS64=1
                LIBBLASNAME=libopenblas64_
                LIBBLAS=-lopenblas64_
                LIBLAPACKNAME=libopenblas64_
                LIBLAPACK=-lopenblas64_)
    ;;
  i686)
    _cpu_target="${_x86_target}"
    julia_opts=("${julia_opts[@]}" MARCH=pentium4
                USE_BLAS64=0
                LIBBLASNAME=libopenblas
                LIBBLAS=-lopenblas
                LIBLAPACKNAME=libopenblas
                LIBLAPACK=-lopenblas)
    ;;
  aarch64)
    _cpu_target="${_aa64_target}"
    julia_opts=("${julia_opts[@]}" MARCH=armv8-a
                USE_BLAS64=1
                LIBBLASNAME=libopenblas64_
                LIBBLAS=-lopenblas64_
                LIBLAPACKNAME=libopenblas64_
                LIBLAPACK=-lopenblas64_)
    ;;
  armv7h)
    _cpu_target="${_arm_target}"
    julia_opts=("${julia_opts[@]}" MARCH=armv7-a
                USE_BLAS64=0
                LIBBLASNAME=libopenblas
                LIBBLAS=-lopenblas
                LIBLAPACKNAME=libopenblas
                LIBLAPACK=-lopenblas)
    ;;
esac
julia_opts=("${julia_opts[@]}" JULIA_CPU_TARGET="${_cpu_target}")

_apply_patch() {
  echo "Applying $1"
  patch -Np1 --no-backup-if-mismatch < "../$1"
}

_patch_suitesparse() {
  echo "Patching suitesparse version"
  local cholmod_libs=(/usr/lib/libcholmod.so.*.*.*)
  local cholmod_maj_ver=
  local cholmod_min_ver=
  local cholmod_patch_ver=
  local lib
  for lib in "${cholmod_libs[@]}"; do
    [[ $lib =~ /usr/lib/libcholmod\.so\.([0-9]+)\.([0-9]+)\.([0-9]+) ]] || continue
    if [[ -z $cholmod_maj_ver ]]; then
      cholmod_maj_ver=${BASH_REMATCH[1]}
      cholmod_min_ver=${BASH_REMATCH[2]}
      cholmod_patch_ver=${BASH_REMATCH[2]}
    else
      echo "WARNING: Multiple versions of cholmod libraries found" >&2
    fi
  done
  for d in usr/share/julia/stdlib/v*/SparseArrays; do
    (
      cd "$d"
      # Patch the code to assume newer cholmod version. This is generally unsafe
      # but should be fine for 3->4 according to the suitesparse changelog.
      for f in src/solvers/wrappers.jl; do
        echo "Updating $d/$f"
        sed -i -e "s/\(CHOLMOD_MAIN_VERSION *= *\)[0-9]*/\1${cholmod_maj_ver}/" "$f"
        sed -i -e "s/\(CHOLMOD_SUB_VERSION *= *\)[0-9]*/\1${cholmod_min_ver}/" "$f"
        sed -i -e "s/\(CHOLMOD_SUBSUB_VERSION *= *\)[0-9]*/\1${cholmod_patch_ver}/" "$f"
      done
    )
  done

  sed -i -e 's/^[[:blank:]]*\$(eval.*libcholmod_cuda/# &/' base/Makefile
  sed -i -e 's/^[[:blank:]]*\$(eval.*libspqr_cuda/# &/' base/Makefile
}

prepare() {
  rm -rf bin/
  mkdir -p bin/

  for p in cc c++ gcc g++; do
    cat > bin/$p <<EOF
exec /usr/bin/$p "\${@/#-O0/-Og}" -fasynchronous-unwind-tables -ffile-prefix-map="${srcdir}=${DBGSRCDIR:-/usr/src/debug}"
EOF
    chmod +x bin/$p
  done

  cd julia

  git reset --hard HEAD
  git clean -fdx

  for p in "${_patches[@]}"; do
    _apply_patch "$p"
  done
  make "${julia_opts[@]}" julia-stdlib
  (
    cd usr/share/julia/stdlib/v*/Pkg
    patch -Np0 --no-backup-if-mismatch < "$srcdir/sysp7z.diff"
  )
  (
    cd usr/share/julia/stdlib/v*/Downloads
    patch -Np0 --no-backup-if-mismatch < "$srcdir/download_curl.diff"
  )
  for f in usr/share/julia/stdlib/v*/*/*Artifacts.toml; do
    echo "Clearing $f"
    echo > "$f"
  done
  _patch_suitesparse
  # Try disabling threading when generating precompilations
  # The module initialization code seems to have some bug that is triggered
  # reliably on aarch64 on the build machine.
  sed -i -e 's/debug_output = devnull/debug_output = stdout/' \
      -e 's/cpu-target=native/cpu-target=native -t1,0/' contrib/generate_precompile.jl
  sed -i -e 's/-fno-omit-frame-pointer/-fomit-frame-pointer/g' */Makefile
  sed -i -e 's/\(symlink_system_library,CSL,libquadmath,[0-9]*\))/\1,ALLOW_FAILURE)/g' base/Makefile
}

_with_git_url_override() {
  # doc build tries to read the remote for the current build directly
  # Make it happy by setting the remote url temporarily
  local _orig_remote=$(git config --get remote.origin.url)
  git config remote.origin.url https://github.com/JuliaLang/julia
  if ! "$@"; then
    git config remote.origin.url "$_orig_remote"
    return 1
  fi
  git config remote.origin.url "$_orig_remote"
}

build_in() {
  cd "$1"

  export JL_MAKEPKG_SRCDIR="${PWD}"

  opts=("${@:3}")
  export PATH="${srcdir}/bin:${PATH}"
  if [[ $CARCH = i686 ]]; then
    CFLAGS="${CFLAGS//-march=i686/-march=pentium4} -march=pentium4"
    CXXFLAGS="${CXXFLAGS//-march=i686/-march=pentium4} -march=pentium4"
  fi
  CFLAGS+=" -ffile-prefix-map=${srcdir}=${DBGSRCDIR:-/usr/src/debug}"
  CXXFLAGS+=" -ffile-prefix-map=${srcdir}=${DBGSRCDIR:-/usr/src/debug}"
  export CFLAGS+=' -Wno-pedantic -Wno-clobbered'
  export CXXFLAGS+=' -Wno-pedantic -Wno-clobbered'

  ver=$(cat VERSION | cut -f 1-2 -d '.')

  # These are to workaround bugs in the hand-made build system that can't handle
  # parallel build properly.
  make "${opts[@]}" -C base version_git.jl.phony
  make "${opts[@]}" -C deps
  make "${opts[@]}" -C src jl_internal_funcs.inc
  make "${opts[@]}" julia-cli-release
  # I'm a bit too lazy to fix this properly
  # so I'm just going to create this missing symlink
  ln -sf /usr/lib/libgcc_s.so.1 usr/lib/julia/
  ln -sf /usr/lib/libstdc++.so.6 usr/lib/
  if [[ "$CARCH" = x86_64 ]]; then
    # Currently only the x86 build machine
    # has enough memory to compile release and debug build in parallel...
    make "${opts[@]}" release debug
  else
    make "${opts[@]}" release
    make "${opts[@]}" debug
  fi
  # TODO docless build
  JL_MAKEPKG_SRCDIR= _with_git_url_override make "${opts[@]}" docs

  # Check to detect issues like JuliaLang/julia#13820
  LD_PRELOAD= JL_MAKEPKG_SRCDIR= usr/bin/julia -e '0'
  LD_PRELOAD= JL_MAKEPKG_SRCDIR= usr/bin/julia-debug -e '0'
}

build() {
  if [[ $(vercmp $(g++ -dumpversion) 10) = -1 ]]; then
    g20=gnu++2a
  else
    g20=gnu++20
  fi
  g++ -fPIC -Wall -Wextra -shared -o libarch-source-translate.so -O2 \
      -std=$g20 arch-source-translate.cpp
  # _ld_preload="${srcdir}/libarch-source-translate.so"
  # if [[ -n $LD_PRELOAD ]]; then
  #   _ld_preload="${_ld_preload}:$LD_PRELOAD"
  # fi
  (LD_PRELOAD="${_ld_preload}" build_in julia $BUILD_DOC "${julia_opts[@]}")
}

_source_files() {
  # Copied from /usr/share/makepkg/tidy/strip.sh
  LANG=C readelf "$1" --debug-dump 2>/dev/null | \
    awk '/DW_AT_name +:/{name=$NF}/DW_AT_comp_dir +:/{{if (name == "<artificial>") next}{if (name !~ /^[<\/]/) {printf "%s/", $NF}}{print name}}'
}

package-julia-in() {
  _llvm_ver=$(${_LLVM_CONFIG} --version)
  [[ $_llvm_ver =~ ^([0-9]*).* ]]
  llvm_maj_ver=${BASH_REMATCH[1]}
  ((next_llvm_maj=llvm_maj_ver + 1))

  arch=('i686' 'x86_64' 'armv7h' 'aarch64')
  depends=("${depends_libs[@]}"
           "llvm-libs-julia-git>=${llvm_maj_ver}.0"
           "llvm-libs-julia-git<${next_llvm_maj}.0"
           hicolor-icon-theme xdg-utils)
  opts=("${@:2}")

  cd "$1"

  export JL_MAKEPKG_SRCDIR="${PWD}"

  # TODO docless build
  # if ((BUILD_DOC)); then
  # Install the debug version first. If there's any file conflict
  # due to build system bugs, I want the final version to be the release one.

  # Delete precompiled environment since it seems to be picking up the one compiled
  # for the wrong julia build during document generation.
  rm -rf doc/deps/compiled
  _with_git_url_override \
    make install DESTDIR="$pkgdir" "${opts[@]}" JULIA_BUILD_MODE=debug
  rm -rf doc/deps/compiled
  _with_git_url_override \
    make install DESTDIR="$pkgdir" "${opts[@]}" JULIA_BUILD_MODE=release
  # else
  #   make install-nodoc DESTDIR="$pkgdir" "${opts[@]}"
  #   # Manually install man pages
  #   mkdir -p "$pkgdir"/usr/share/man/man1/
  #   install -m644 -t "$pkgdir"/usr/share/man/man1/ usr/share/man/man1/julia.1
  # fi

  # Remove doc files (should be non for nodoc install)
  rm -rf "$pkgdir/usr/share/doc/julia"

  # Running julia requires this link
  ln -sf /usr/lib/libstdc++.so.6 "${pkgdir}"/usr/lib/
  ver=$("$pkgdir/usr/bin/julia" \
          --startup-file=no \
          -e 'print(VERSION.major, ".", VERSION.minor, ".", VERSION.patch)')
  ver_short=$("$pkgdir/usr/bin/julia" \
                --startup-file=no \
                -e 'print(VERSION.major, ".", VERSION.minor)')
  stdlib_dir="$pkgdir/usr/share/julia/stdlib/v$ver_short"
  builtin_pkgs=()
  for pkg in $(ls -1 "$stdlib_dir"); do
    if [[ -f "$stdlib_dir/$pkg/Project.toml" ]]; then
      builtin_pkgs=("${builtin_pkgs[@]}" "julia-git-${pkg,,}" "julia-git-${pkg,,}-src")
      echo "$pkg"
    fi
    # Keep a list of the builtin stdlibs so that we can compile these as a whole
    # in a single package. Note that even though these are builtin,
    # not all of them are in the system image.
  done > "$pkgdir/usr/share/julia/builtin_stdlib.v$ver_short"
  provides=("julia=2:$ver" "${builtin_pkgs[@]}")
  conflicts=('julia' "${builtin_pkgs[@]}")
  replaces=("${builtin_pkgs[@]}")

  "${srcdir}/archcn-julia-scripts/install.sh" "${pkgdir}" "$ver_short"

  mkdir -p "${pkgdir}/usr/share/julia/compiled/v$ver_short"

  mkdir -p "${pkgdir}/usr/share/julia/contrib"
  install -m644 -t "${pkgdir}/usr/share/julia/contrib" contrib/generate_precompile.jl

  # From ca-certificates-utils, needed by Downloads stdlib
  ln -sf /etc/ssl/cert.pem "${pkgdir}/usr/share/julia/cert.pem"

  rm "$pkgdir"/usr/lib/julia/libccalltest.so.debug # Remove debug testing library

  # Without stripping, makepkg doesn't copy the source for us...
  dbgsrcdir="${DBGSRCDIR:-/usr/src/debug}"
  for binary in usr/bin/julia usr/bin/julia-debug \
                              usr/lib/libjulia.so usr/lib/libjulia-debug.so \
                              usr/lib/julia/libjulia-internal.so \
                              usr/lib/julia/libjulia-internal-debug.so; do
    binary="${pkgdir}/${binary}"
    ls "$binary"
    # copy source files to debug directory
    local f t
    while IFS= read -r t; do
      f=${t/${dbgsrcdir}/"$srcdir"}
      if ! [[ -f "$f" ]]; then
        echo "Cannot find source file: '$f'"
        continue
      fi
      case "${t%/*}" in
        "${srcdir}"*)
          echo "Source file path not mapped: '${t%/*}'."
          continue
          ;;
      esac
      mkdir -p "${pkgdir}/${t%/*}"
      cp -- "$f" "${pkgdir}/${t%/*}"
    done < <(_source_files "$binary")
  done
  # Files that are not compiled directly aren't being copied by the code above.
  # This include all headers as well as some cpp files
  #   (e.g. `cgutils.cpp`, `processor_*.cpp` etc)
  # that are included from other files. Copy these directly for now.
  cp src/*.{c,cpp} "${pkgdir}/${dbgsrcdir}/julia/src/"
  (
    cd "${pkgdir}/usr/include/julia"
    mkdir -p "${pkgdir}/${dbgsrcdir}/julia/src/"
    for f in *; do
      ln -sf "/usr/include/julia/$f" "${pkgdir}/${dbgsrcdir}/julia/src/$f"
    done
  )

  # The ones that julia build system build does not seem to work at the moment.
  # rm -rf "${pkgdir}/usr/share/julia/compiled/v$ver_short/"*
  env JULIA_PRECOMPILE_STDLIB_DIR="/usr/share/julia/stdlib/v$ver_short" \
      JULIA_CPU_TARGET="${_cpu_target}" \
      proot -b "${pkgdir}/usr/share/julia/:/usr/share/julia/" \
      "${pkgdir}/usr/bin/julia" --startup-file=no \
      "${srcdir}/archcn-julia-scripts/julia-compile-pkgs.jl" /usr/share/julia
  env JULIA_PRECOMPILE_STDLIB_DIR="/usr/share/julia/stdlib/v$ver_short" \
      JULIA_CPU_TARGET="${_cpu_target}" \
      proot -b "${pkgdir}/usr/share/julia/:/usr/share/julia/" \
      "${pkgdir}/usr/bin/julia-debug" --startup-file=no \
      "${srcdir}/archcn-julia-scripts/julia-compile-pkgs.jl" /usr/share/julia
  mkdir -p "${pkgdir}/usr/lib/julia/arch-compiled/julia/"
  mv "${pkgdir}/usr/share/julia/compiled/v$ver_short/"* \
     "${pkgdir}/usr/lib/julia/arch-compiled/julia/"

  chmod -R go-w "${pkgdir}/usr/lib/julia/arch-compiled/julia/"

  # The ji file records the exact time stamps so we need to fix those in post_install
  (
    echo "_fix_timestamps() {"
    cd "${pkgdir}"
    find usr/share/julia/stdlib -type f -exec \
         sh -c 'echo "  touch -c -d \"$(stat -c %y "{}")\" \"{}\""' \;
    echo "}"

    echo "post_install() {"
    echo "  _fix_timestamps"
    echo "}"

    echo "post_upgrade() {"
    echo "  _fix_timestamps"
    echo "}"
  ) > "${startdir}/install.pkg"
  true && install=install.pkg

  # Manually filling in the soname dependencies since makepkg doesn't recognize the symlink
  # julia uses to specify the soname
  for libname in "${_soname_deps[@]}"; do
    local filename="${pkgdir}/usr/lib/julia/${libname}"
    [[ -f "${filename}" ]] || {
      echo "Cannot find library: ${libname} in ${pkgdir}/usr/lib/julia/"
      exit 1
    }
    local soarch=$(LC_ALL=C readelf -h "$filename" 2>/dev/null |
                     sed -n 's/.*Class.*ELF\(32\|64\)/\1/p')
    [[ -n "$soarch" ]] || [[ "$soarch" != "$_soarch" ]] || {
      echo "SO arch of library ${libname}: '${soarch}' does not match '${_soarch}'"
      exit 1
    }

    local sofile=$(LC_ALL=C readelf -d "$filename" 2>/dev/null |
                     sed -n 's/.*Library soname: \[\(.*\)\].*/\1/p')
    if [[ -z "$sofile" ]]; then
      echo "Library ${libname}: is not versioned"
      exit 1
    fi

    local soversion="${sofile##*\.so\.}"
    depends+=("${libname}=${soversion}-${soarch}")
  done
  rm "${pkgdir}"/usr/lib/libstdc++.so.6
}

package_julia-git() {
  # export LD_PRELOAD="${srcdir}/libarch-source-translate.so:$LD_PRELOAD"
  package-julia-in julia "${julia_opts[@]}"
  if [[ "$CARCH" = x86_64 ]]; then
    replaces=(julia-git-avx2)
  fi
}

package_julia-git-package-env() {
  backup=(usr/lib/julia/.package-precompile-env)
  pkgdesc+=" (Package precompilation environment)"

  mkdir -p "${pkgdir}/usr/lib/julia/"
  cat > "${pkgdir}/usr/lib/julia/.package-precompile-env" <<EOF
export JULIA_CPU_TARGET="${_cpu_target}"
export JULIA_PRECOMPILE_NPROCESS=4
EOF
}

package_julia-git-docs() {
  arch=('any')
  pkgdesc+=" (Documents)"
  provides=('julia-docs' 'julia-doc')
  conflicts=('julia-docs' 'julia-doc' 'julia-git-doc' 'julia-doc-git')
  replaces=('julia-git-doc' 'julia-doc-git')

  cd julia/doc/_build

  mkdir -p "$pkgdir"/usr/share/doc/julia/
  cp -dpr --no-preserve=ownership html "$pkgdir"/usr/share/doc/julia/
  find "$pkgdir/usr/share/doc/julia/" -type f -exec sed -i -e "s|$srcdir/julia||g" '{}' \+
}
