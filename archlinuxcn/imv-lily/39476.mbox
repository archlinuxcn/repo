From nobody Thu Aug 15 10:44:27 2024
Authentication-Results: mail-b.sr.ht; dkim=pass header.d=nixnetmail.com header.i=@nixnetmail.com
Received: from mx.nixnet.email (mx.nixnet.email [5.161.67.119])
	by mail-b.sr.ht (Postfix) with ESMTPS id 03E8311F0F0
	for <~exec64/imv-devel@lists.sr.ht>; Fri,  3 Mar 2023 17:47:48 +0000 (UTC)
Received: from [127.0.0.1] (localhost [127.0.0.1])
	by mx.nixnet.email (Postfix) with ESMTPSA id 789657D32F;
	Fri,  3 Mar 2023 18:47:46 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nixnetmail.com;
	s=202002021149; t=1677865667;
	h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
	 to:to:cc:cc:mime-version:mime-version:
	 content-transfer-encoding:content-transfer-encoding;
	bh=vLxS1T/iCmBOawB2D5e1ZZFtydABg12GdYS4wkRRgU0=;
	b=ou1ruaRs4OzK4gNZS1F4XeuzskDxqGC+2xq1P70u2JdoKc40xVhu2HhRl6bLEknoYCTWJl
	mwA8MT3moLatO+e+DCYVX0Sl7jSQdtWO6SewMz6PgMbwMtdSngTc6vRrhf06eiZEzCFPki
	/ghR11f/5kspKNTfUwZjNfaAcx0akq8=
From: blankie <blankie@nixnetmail.com>
To: ~exec64/imv-devel@lists.sr.ht
Cc: blankie <blankie@nixnetmail.com>
Subject: [PATCH imv] wl_window: fix repeated keypresses after running long commands
Date: Sat,  4 Mar 2023 00:47:01 +0700
Message-Id: <20230303174700.175896-1-blankie@nixnetmail.com>
X-Mailer: git-send-email 2.39.2
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit

When a command runs longer than the time required for keypresses
to be repeated, imv will set up a timer to repeat the keypress
since it will have been past the delay required to begin repeating
keypresses.

Without a wl_display_roundtrip, the code responsible for handling
key releases (which unarms the timer) may be called a little later
or never at all.

https://todo.sr.ht/~exec64/imv/7
---
I'm not familiar with imv's codebase (so I don't know if `repeat_scancode`
can be set to zero as a value to check if the key is currently being
repeated, hence a seperate `repeating` variable), nor have I written code
that uses Wayland before (therefore, I'm not sure how safe calling
`wl_display_roundtrip` is since the link below mentions the possibility of
a deadlock:
https://wayland.freedesktop.org/docs/html/apb.html#Client-classwl__display_1ab60f38c2f80980ac84f347e932793390)

 src/wl_window.c | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/src/wl_window.c b/src/wl_window.c
index 0c2221a..1410ebe 100644
--- a/src/wl_window.c
+++ b/src/wl_window.c
@@ -45,6 +45,7 @@ struct imv_window {
   int pipe_fds[2];
 
   timer_t timer_id;
+  bool repeating; /* if the key is currently being repeated */
   int repeat_scancode; /* scancode of key to repeat */
   int repeat_delay; /* time before repeat in ms */
   int repeat_interval; /* time between repeats in ms */
@@ -183,6 +184,7 @@ static void keyboard_key(void *data, struct wl_keyboard *keyboard,
 
   if (!state) {
     /* If a key repeat timer is running, stop it */
+    window->repeating = false;
     struct itimerspec off = {
       .it_value = {
         .tv_sec = 0,
@@ -203,6 +205,7 @@ static void keyboard_key(void *data, struct wl_keyboard *keyboard,
 
   if (imv_keyboard_should_key_repeat(window->keyboard, key)) {
     /* Kick off the key-repeat timer for the current key */
+    window->repeating = true;
     window->repeat_scancode = key;
     struct itimerspec period = {
       .it_value = {
@@ -775,7 +778,10 @@ static void shutdown_wayland(struct imv_window *window)
 static void on_timer(union sigval sigval)
 {
   struct imv_window *window = sigval.sival_ptr;
-  push_keypress(window, window->repeat_scancode);
+  wl_display_roundtrip(window->wl_display);
+  if (window->repeating) {
+    push_keypress(window, window->repeat_scancode);
+  }
 }
 
 struct imv_window *imv_window_create(int width, int height, const char *title)
-- 
2.39.2


