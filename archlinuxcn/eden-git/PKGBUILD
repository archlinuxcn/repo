# Maintainer: sukanka <su975853527 [at] gmail [dot] com>
_pkgname=eden
pkgname=${_pkgname,,}-git
_cmd=yuzu
pkgver=0.0.2.pre.alpha.r48
pkgrel=1
pkgdesc="Nintendo Switch emulator forked from yuzu"
arch=(x86_64)
url=https://git.eden-emu.dev/eden-emu/eden
license=(GPL-3.0-or-later)
provides=('eden')
depends=('boost-libs' 'hicolor-icon-theme' 'sdl2' 'qt6-base' 'qt6-webengine' 'fmt' 'opus' 'lz4'
  'openssl' 'zstd' 'cubeb' 'enet' 'discord-rpc' 'cpp-httplib' 'dynarmic' 'mbedtls2' 'ffmpeg'
)
makedepends=('llvm' 'git' 'glslang' 'cmake' 'ninja' 'perl' 'clang' 'patch'
  'qt6-tools' 'qt6-multimedia' 'libxkbcommon-x11' 'libzip' 'libfdk-aac' 'libinih'
  'vulkan-memory-allocator' 'vulkan-utility-libraries' 'vulkan-headers' 'spirv-headers'
  'boost' 'nlohmann-json' 'robin-map' 'cpp-jwt' 'gamemode' 'python' 'renderdoc'

  'xbyak'

  # for documentation
  # 'doxygen' 'python-jinja' 'python-jsonschema' 'graphviz'

  # for testing
  # 'catch2'
)
optdepends=('qt6-wayland: for Wayland support')
source=(
  eden::git+${url}.git
  git+https://github.com/yuzu-mirror/sirit.git#commit=ab75463
  git+https://github.com/brofield/simpleini.git#commit=6048871ea9
  "https://github.com/lat9nq/tzdb_to_nx/releases/download/221202/221202.zip"
  0001-fix-package-version.patch
  0002-fix-function-definition.patch
  0003-use-system-boost-headers.patch
  0004-system-mbedtls.patch
)
noextract=('221202.zip')
b2sums=('SKIP'
  '91e4cd03d67c930b6d751ca19cf6fbaaba86084412bd13b172186387ea27b461457a3e19bc0af315c807839e64f91c865298678af748e2d6e07df2abc85430ed'
  'fae42bb13f180ab991f6bfc8a45ea3df08ced1d77db77f54cf5a222f93ea468bd6fc0d36d65f9f3739e9813d77dbae31931948dc9afa28e884c53b8128c13c94'
  '7bd0ff5ca80cf560344ae7edbfeb7c9466c096dc499a7348276cff5d30aa07464f7e2ea391ca9cedac0e21ba6f563169a8b38f2df729a230a0acfb1125ea1b66'
  '734d64131c2e65e78477da569ffcc3a85a5adad437df2d4071d875f9795e97c9b334d51b6528fecf4adbd18f51f2e2d3d3b3ac7fe7e22024fdcc674268c3f2dc'
  'ce00d4eb2746f65582ebdf942c449343f5ac2cd28bf063e0de0c29762c7251db2e569841d02e71cbb0cc016bc383fc4e18762c4a9c7168baa357210600dc01de'
  'da6e2a0e03f94e83e2143be2d19a3a2842e02a3294d8ad1004810ca2e9b538d909c03aa34f965b0c51140b96b1c05c3264288cfb448e8ca14efffb0be3d93512'
  '19bf117b20387be3a92f90dec03979aa38315f9bd04ea6df4726b19c541c8d9d48e9edf22e27c449d66884e6f54eedfe9aabe4ff842bc18a91841e7abc6a3854')
pkgver() {
  cd "$srcdir/$_pkgname"
  git describe --long --abbrev=7 --tags | sed 's/\([^-]*\)-g.*/r\1/;s/-/./g;s/^v//g'
}

_apply_patch() {
  cd $srcdir/$_pkgname
  for p in $srcdir/*.patch; do
    patch -Np1 <${p}
  done
  # download tzdata from our zip file
  sed -i externals/nx_tzdb/CMakeLists.txt \
    -e "s|https://github.com/lat9nq/tzdb_to_nx/releases/download/\${NX_TZDB_VERSION}|file://${srcdir}|g"

}
prepare() {
  local submods=(
    sirit
    simpleini
  )

  for pro in ${submods[@]}; do
    cp -rf ${srcdir}/${pro}/* $srcdir/$_pkgname/externals/${pro}
  done

  (
    _apply_patch
  )

}

build() {
  export CC=clang
  export CXX=clang++
  export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/lib/mbedtls2/pkgconfig

  local cmake_args=(
    -GNinja
    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
    -DTITLE_BAR_FORMAT_IDLE="$_pkgname $pkgver"
    -DTITLE_BAR_FORMAT_RUNNING="$_pkgname $pkgver | {3}"
    -DCMAKE_INSTALL_PREFIX=/usr
    -DCMAKE_BUILD_TYPE=Release
    -DYUZU_ENABLE_COMPATIBILITY_REPORTING=OFF
    -DENABLE_COMPATIBILITY_LIST_DOWNLOAD=OFF
    -DYUZU_USE_QT_WEB_ENGINE=ON
    -DUSE_DISCORD_PRESENCE=ON
    -DENABLE_QT_TRANSLATION=ON
    -DYUZU_USE_BUNDLED_FFMPEG=OFF
    -DYUZU_USE_BUNDLED_QT=OFF
    -DYUZU_USE_EXTERNAL_SDL2=OFF
    -DYUZU_CHECK_SUBMODULES=OFF
    -DYUZU_USE_EXTERNAL_VULKAN_HEADERS=OFF
    -DYUZU_USE_EXTERNAL_VULKAN_UTILITY_LIBRARIES=OFF
    -DYUZU_USE_FASTER_LD=OFF
    -DYUZU_USE_PRECOMPILED_HEADERS=OFF
    -DYUZU_USE_QT_MULTIMEDIA=ON
    # download timezone data from our zip file.
    -DYUZU_DOWNLOAD_TIME_ZONE_DATA=ON
    -DYUZU_TESTS=OFF
    -DSIRIT_USE_SYSTEM_SPIRV_HEADERS=ON
    -DUSE_SYSTEM_QT=ON
    -DCMAKE_POLICY_VERSION_MINIMUM=3.5
  )
  install -d build
  cmake -S ${_pkgname} -B build "${cmake_args[@]}"
  ninja -C build

}

package() {
  install -Dm644 $srcdir/${_pkgname}/dist/72-${_cmd}-input.rules -t ${pkgdir}/usr/lib/udev/rules.d/
  DESTDIR="$pkgdir/" ninja -C $srcdir/build install
}
