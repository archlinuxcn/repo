# Maintainer: username227 <gfrank227 [at] gmail [dot] com> 
_pkgname=torzu
_branch=main
pkgname=torzu-git
pkgver=r27198.02cfee3f1
pkgrel=1
pkgdesc="Torzu is a fork of yuzu, the world's most popular, open-source, Nintendo Switch emulator. It is written in C++ with portability in mind."
arch=(x86_64)
url=https://notabug.org/litucks/torzu
license=(GPL-3.0-or-later)
provides=('torzu')
depends=('alsa-lib' 'brotli' 'catch2' 'enet' 'llvm-libs' 'freetype2' 'gcc-libs' 'glibc' 'glu' 'hicolor-icon-theme' 'gamemode' 'libass' 'libpulse' 'libtool' 'libvdpau' 'lz4' 'sdl2' 'zlib' 'qt5-webengine' 'qt5-multimedia')
makedepends=('curl' 'autoconf' 'cmake' 'gcc' 'git' 'glslang' 'alsa-lib' 'glu' 'hidapi' 'libpulse' 'systemd-libs' 'xcb-util-wm' 'xcb-util-image' 'xcb-util-keysyms' 'xcb-util-renderutil' 'libxcb' 'libxext' 'libxkbcommon-x11' 'nasm' 'qt5-base' 'qt5-webengine' 'qt5-tools' 'mbedtls2' 'fmt' 'nlohmann-json' 'zstd' 'openssl' 'libunistring' 'aom' 'automake' 'base-devel' 'libass' 'freetype2' 'haskell-gnutls' 'lame' 'sdl2' 'libva' 'libvorbis' 'libxcb' 'meson' 'ninja' 'pkgconf' 'texinfo' 'wget' 'vasm' 'x264' 'x265' 'numactl' 'libvpx' 'libfdk-aac' 'libopusenc' 'ffmpeg' 'svt-av1' 'dav1d' 'boost' 'clang' 'vulkan-headers' 'ffmpeg4.4' 'zip' 'unzip' 'tar' 'boost-libs')
conflicts=('torzu')
options=(!debug lto strip)
source=(
  git+https://notabug.org/litucks/torzu
  git+https://github.com/lsalzman/enet.git
  cubeb::git+http://github.com/mozilla/cubeb.git
  git+https://github.com/libusb/libusb.git
  git+https://github.com/herumi/xbyak.git
  git+https://github.com/xiph/opus.git
  git+https://github.com/libsdl-org/SDL.git
  git+https://github.com/yhirose/cpp-httplib.git
  ffmpeg::git+https://github.com/FFmpeg/FFmpeg.git
  git+https://github.com/microsoft/vcpkg.git
  git+https://github.com/bylaws/libadrenotools.git
  git+https://github.com/lat9nq/tzdb_to_nx.git
  git+https://github.com/brofield/simpleini.git
  git+https://github.com/merryhime/oaknut.git
  git+https://github.com/KhronosGroup/SPIRV-Headers.git
  git+https://github.com/KhronosGroup/SPIRV-Tools.git
  git+https://github.com/fmtlib/fmt.git
  git+https://github.com/KhronosGroup/Vulkan-Utility-Libraries.git
  git+https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git
  git+https://github.com/KhronosGroup/Vulkan-Headers.git
  git+https://github.com/arun11299/cpp-jwt.git
  # Submodule Submodules
  git+https://github.com/eggert/tz.git #submodule_of_tzdb_to_nx
  git+https://github.com/bylaws/liblinkernsbypass.git #submodule_of_libadrenogtools
  git+https://github.com/google/googletest.git #submodule_of_cubeb
  git+https://github.com/arsenm/sanitizers-cmake.git #submodule_of_cubeb
  )
b2sums=('SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP')

pkgver() {
    cd "$srcdir/$_pkgname"
    printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}

prepare() {
  cd "$srcdir/$_pkgname"
  for submodule in {enet,cubeb,libusb,xbyak,opus,SDL,cpp-httplib,ffmpeg,vcpkg,libadrenotools,tzdb_to_nx,simpleini,cpp-jwt,oaknut,SPIRV-Headers,SPIRV-Tools,fmt,Vulkan-Utility-Libraries,VulkanMemoryAllocator,Vulkan-Headers};
  do
    git config --file=.gitmodules submodule.$submodule.url "${srcdir}"/$submodule
  done
  git -c protocol.file.allow=always submodule update --init

  pushd externals/cubeb
  for submodule in {sanitiers-cmake,googletest};
  do
  git config --file=.gitmodules submodule.$submodule.url "${srcdir}"/$submodule
  done
  git -c protocol.file.allow=always submodule update --init
  popd

  pushd externals/libadrenotools
  git config submodule.lib/linkersbypass.url "${srcdir}"/linkernsbypass
  git -c protocol.file.allow=always submodule update
  popd

  pushd externals/nx_tzdb/tzdb_to_nx
  git config submodule.externals/tz/tz.url "${srcdir}"/tz
  git -c protocol.file.allow=always submodule update
  popd
}

build() {
  cd "$srcdir/torzu"
   # Fix to help cmake find libusb
  CXXFLAGS+=" -I/usr/include/libusb-1.0"
  
  cmake -B build -G Ninja \
    -DYUZU_USE_BUNDLED_VCPKG=ON \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_FLAGS="-march=x86-64-v2" \
    -DENABLE_COMPATIBILITY_LIST_DOWNLOAD=ON \
    -DENABLE_QT_TRANSLATION=ON \
    -DYUZU_USE_FASTER_LD=OFF \
    -DYUZU_USE_EXTERNAL_VULKAN_SPIRV_TOOLS=OFF \
    -DYUZU_ENABLE_COMPATIBILITY_REPORTING=${ENABLE_COMPATIBILITY_REPORTING:-"OFF"} \
    -DYUZU_USE_BUNDLED_FFMPEG=OFF \
    -DYUZU_ENABLE_LTO=ON \
    -DYUZU_CRASH_DUMPS=OFF \
    -DCMAKE_INSTALL_PREFIX="/usr" \
    -DYUZU_ROOM=OFF \
    -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
    -DFFmpeg_COMPONENTS="swscale;avutil;avfilter;avcodec" \
    -DFFmpeg_PREFIX=$srcdir/externals/ffmpeg/ffmpeg \
    -GNinja \
    -Wno-dev
  ninja -C build
} 

package() {
  DESTDIR="$pkgdir/" ninja -C $srcdir/torzu/build install

}

