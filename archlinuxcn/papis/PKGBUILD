# Maintainer: Roald Clark <roaldclark@gmail.com>
# Contributor: Gesh <gesh@gesh.uni.cx>
# Contributor: Stefan Gehr <stefan@gehr.xyz>

pkgname=papis
pkgver=0.14.1
pkgrel=1
pkgdesc="Command-line document and bibliography manager"
arch=('any')
url="https://github.com/papis/papis"
license=('GPL-3.0-or-later')
depends=(
    'python'
    'python-arxiv'
    'python-beautifulsoup4'
    'python-bibtexparser'
    'python-click'
    'python-colorama'
    'python-doi'
    'python-dominate'
    'python-filetype'
    'python-habanero'
    'python-isbnlib'
    'python-lxml'
    'python-platformdirs'
    'python-prompt_toolkit'
    'python-pygments'
    'python-pyparsing'
    'python-requests'
    'python-slugify'
    'python-stevedore'
    'python-yaml'
)
makedepends=(
    'python-build'
    'python-hatchling'
    'python-installer'
    'python-setuptools'
    'python-sphinx'
    'python-sphinx-click'
    'python-sphinx-design'
    'python-wheel'
)
checkdepends=(
    'python-pytest'
    'python-pytest-cov'

    # These are optional -- if they're not installed, papis will automatically
    # skip these tests -- and are only necessary if you intend to use the
    # optdeps as well
    'python-chardet'
    'python-jinja'
    'python-markdownify'
    'python-whoosh'
)
optdepends=(
    # Alternative pickers
    'fzf: alternative picker'
    'papis-rofi: alternative picker'

    # Integrations
    'git: integration with git'
    'papis-zotero: imports from zotero'
    'python-papis-scihub: imports from scihub'

    # Internally-optional features
    # papis doesn't make use of the system installation of pdfjs, instead
    # requiring an installation in $XDG_CONFIG_HOME.
    # see https://github.com/papis/papis/issues/946
    # 'pdfjs: pdf reader in the web app'
    'python-chardet: improved encoding autodetection when scraping'
    'python-jinja: jinja formatting'
    'python-markdownify: convert zenodo imports to markdown'
    'python-whoosh: whoosh database backend'

    # Plugin helpers used by some plugins
    'python-docutils: for papis.sphinx_ext (used by some plugins)'
    'python-pytest: for papis.testing (used by some plugins)'
    'python-sphinx-click: for papis.sphinx_ext (used by some plugins)'
    'python-sphinx: for papis.sphinx_ext (used by some plugins)'
)
source=("${pkgname}-${pkgver}.tar.gz::${url}/archive/v${pkgver}.tar.gz")
b2sums=('544802d79aa2cb1441faf8ec524ae3bee2084786a8420cfccbb9af850d0d31b21b9ca64e7063195f6cd04c45ed1c40ba6d087094defcdaec067f61a6239debbe')

prepare() {
    cd "${srcdir}/${pkgname}-${pkgver}"
    python -m build --wheel --no-isolation
    python -m installer --destdir=tmp_test_install dist/*.whl
    local site_packages=$(python -c 'import site; print(site.getsitepackages()[0])')
    export PYTHONPATH="${PWD}/tmp_test_install${site_packages}:${PYTHONPATH}"
    export PATH="${PWD}/tmp_test_install/usr/bin:${PATH}"
    make -C doc man
}

build() {
    cd "${srcdir}/${pkgname}-${pkgver}"
    python -m build --wheel --no-isolation
}

check() {
    cd "${srcdir}/${pkgname}-${pkgver}"
    python -m pytest papis tests
}

package() {
    cd "${srcdir}/${pkgname}-${pkgver}"
    python -m installer --destdir="${pkgdir}" dist/*.whl
}
