From 6411a85f27a5cd1b8730dbfea40368555b0769d0 Mon Sep 17 00:00:00 2001
From: Stelios Tsampas <loathingkernel@gmail.com>
Date: Wed, 26 Apr 2023 14:22:23 +0300
Subject: [PATCH 1/5] AUR Pkgbuild changes

---
 Makefile.in                    | 71 ++++++++++++++++++++++++++--------
 compatibilitytool.vdf.template |  2 +-
 configure.sh                   |  2 +
 make/rules-autoconf.mk         |  4 +-
 make/rules-cargo.mk            |  4 +-
 make/rules-cmake.mk            |  4 +-
 make/rules-common.mk           | 18 +++++----
 make/rules-configure.mk        |  4 +-
 make/rules-makedep.mk          |  4 +-
 make/rules-meson.mk            |  3 +-
 make/rules-winemaker.mk        |  2 +-
 proton                         |  6 +--
 toolmanifest_runtime.vdf       |  1 -
 13 files changed, 84 insertions(+), 41 deletions(-)

diff --git a/Makefile.in b/Makefile.in
index 4ecab562..11da8142 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -54,11 +54,12 @@ else
 endif
 
 CROSSLDFLAGS   += -Wl,--file-alignment,4096
-OPTIMIZE_FLAGS := -O2 -march=nocona -mtune=core-avx2 -mfpmath=sse
+CFLAGS         ?= -O2 -march=nocona -mtune=core-avx2
+OPTIMIZE_FLAGS := $(CFLAGS) -mfpmath=sse
 SANITY_FLAGS   := -fwrapv -fno-strict-aliasing
 DEBUG_FLAGS    := -ggdb -ffunction-sections -fdata-sections -fno-omit-frame-pointer
 COMMON_FLAGS    = $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) $(SANITY_FLAGS) -ffile-prefix-map=$(CCACHE_BASEDIR)=.
-COMMON_FLAGS32 := -mstackrealign
+COMMON_FLAGS32 := -mstackrealign -mno-avx
 COMMON_FLAGS64 := -mcmodel=small
 CARGO_BUILD_ARGS += --release
 
@@ -72,6 +73,14 @@ else
 	BEAR :=
 endif
 
+ifneq ($(USE_LTO), 1)
+	GST_LTO :=
+	FFMPEG_LTO :=
+else
+	GST_LTO := -Db_lto=true
+	FFMPEG_LTO := --enable-lto
+endif
+
 $(DST_DIR):
 	mkdir -p $@
 
@@ -85,7 +94,7 @@ all: all-dist | $(DST_DIR)
 all-dist: | $(DST_DIR)
 dist: all
 
-J = $(patsubst -j%,%,$(filter -j%,$(MAKEFLAGS)))
+J = $(patsubst -j%,%,$(SUBJOBS))
 
 include $(SRC)/make/utility.mk
 include $(SRC)/make/rules-source.mk
@@ -118,6 +127,7 @@ $(eval $(call rules-meson,dav1d,64))
 ##
 
 GST_ORC_MESON_ARGS := \
+	$(GST_LTO) \
 	-Dorc-test=disabled
 
 $(eval $(call rules-source,gst_orc,$(SRCDIR)/gst-orc))
@@ -130,7 +140,12 @@ $(eval $(call rules-meson,gst_orc,64))
 ##
 
 GSTREAMER_MESON_ARGS := \
+	$(GST_LTO) \
 	-Dgst_parse=false \
+	-Dptp-helper-permissions=capabilities \
+	-Ddbghelp=disabled \
+	-Dintrospection=disabled \
+	-Ddoc=disabled \
 	-Dbenchmarks=disabled \
 	-Dtools=disabled \
 	-Dbash-completion=disabled
@@ -146,6 +161,11 @@ $(eval $(call rules-meson,gstreamer,64))
 ## graphene
 ##
 
+GRAPHENE_MESON_ARGS := \
+	-Dtests=false \
+	-Dintrospection=disabled \
+	-Dinstalled_tests=false
+
 $(eval $(call rules-source,graphene,$(SRCDIR)/graphene))
 $(eval $(call rules-meson,graphene,32))
 $(eval $(call rules-meson,graphene,64))
@@ -156,7 +176,10 @@ $(eval $(call rules-meson,graphene,64))
 ##
 
 GST_BASE_MESON_ARGS := \
+	$(GST_LTO) \
 	-Dauto_features=disabled \
+	-Ddoc=disabled \
+	-Dtools=disabled \
 	-Dadder=enabled \
 	-Dapp=enabled \
 	-Daudioconvert=enabled \
@@ -188,8 +211,10 @@ $(eval $(call rules-meson,gst_base,64))
 ##
 
 GST_GOOD_MESON_ARGS := \
+	$(GST_LTO) \
 	-Dapetag=enabled \
 	-Dauto_features=disabled \
+	-Ddoc=disabled \
 	-Daudioparsers=enabled \
 	-Dautodetect=enabled \
 	-Davi=enabled \
@@ -235,12 +260,16 @@ $(eval $(call rules-meson,gst_bad,64))
 
 FFMPEG_CONFIGURE_ARGS := \
 	--enable-shared \
+	$(FFMPEG_LTO) \
 	--disable-static \
 	--disable-everything \
 	--disable-programs \
 	--disable-doc \
 	--disable-inline-asm \
 
+FFMPEG_CONFIGURE_ARGS64 = --optflags="$(COMMON_FLAGS) $(COMMON_FLAGS64)"
+FFMPEG_CONFIGURE_ARGS32 = --optflags="$(COMMON_FLAGS) $(COMMON_FLAGS32)"
+
 $(eval $(call rules-source,ffmpeg,$(SRCDIR)/ffmpeg))
 $(eval $(call rules-configure,ffmpeg,32))
 $(eval $(call rules-configure,ffmpeg,64))
@@ -342,7 +371,7 @@ $(eval $(call rules-cmake,openxr,64))
 ## Note 32-bit is not supported by SteamVR, so we don't build it.
 ##
 
-WINEOPENXR_LDFLAGS = -lopenxr_loader
+WINEOPENXR_LDFLAGS = -lopenxr_loader -lvulkan
 WINEOPENXR_DEPENDS = wine openxr
 
 $(eval $(call rules-source,wineopenxr,$(SRCDIR)/wineopenxr))
@@ -410,8 +439,10 @@ WINE_SOURCE_ARGS = \
   --exclude server/trace.c \
 
 WINE_CONFIGURE_ARGS = \
-  --enable-werror \
+  --with-x \
+  --with-gstreamer \
   --with-mingw \
+  --without-oss \
   --disable-tests
 
 WINE_CONFIGURE_ARGS32 = \
@@ -473,10 +504,14 @@ DXVK_SOURCE_DATE_EPOCH64 := $(shell expr $(BASE_SOURCE_DATE_EPOCH64) - 1)
 DXVK_SOURCE_ARGS = \
   --exclude version.h.in \
 
+DXVK_MESON_ARGS = --force-fallback-for=libdisplay-info
 DXVK_MESON_ARGS32 = --bindir=$(DXVK_DST32)/lib/wine/dxvk
 DXVK_MESON_ARGS64 = --bindir=$(DXVK_DST64)/lib64/wine/dxvk
 DXVK_DEPENDS = glslang
 
+DXVK_CPPFLAGS = -msse -msse2
+DXVK_LDFLAGS = -static -static-libgcc -static-libstdc++
+
 $(eval $(call rules-source,dxvk,$(SRCDIR)/dxvk))
 $(eval $(call rules-meson,dxvk,32,CROSS))
 $(eval $(call rules-meson,dxvk,64,CROSS))
@@ -504,6 +539,9 @@ $(OBJ)/.dxvk-post-build32:
 DXVK_NVAPI_MESON_ARGS32 = --bindir=$(DXVK_NVAPI_DST32)/lib/wine/nvapi
 DXVK_NVAPI_MESON_ARGS64 = --bindir=$(DXVK_NVAPI_DST64)/lib64/wine/nvapi
 
+DXVK_NVAPI_CPPFLAGS = -msse -msse2
+DXVK_NVAPI_LDFLAGS = -static -static-libgcc -static-libstdc++
+
 $(eval $(call rules-source,dxvk-nvapi,$(SRCDIR)/dxvk-nvapi))
 $(eval $(call rules-meson,dxvk-nvapi,32,CROSS))
 $(eval $(call rules-meson,dxvk-nvapi,64,CROSS))
@@ -583,6 +621,9 @@ ifneq ($(UNSTRIPPED_BUILD),)
 	VKD3D_PROTON_MESON_ARGS = -Denable_trace=true
 endif
 
+VKD3D_PROTON_CPPFLAGS = -msse -msse2
+VKD3D_PROTON_LDFLAGS = -static -static-libgcc -static-libstdc++
+
 $(eval $(call rules-source,vkd3d-proton,$(SRCDIR)/vkd3d-proton))
 $(eval $(call rules-meson,vkd3d-proton,32,CROSS))
 $(eval $(call rules-meson,vkd3d-proton,64,CROSS))
@@ -853,14 +894,14 @@ $(FONTS_OBJ)/source-han/%.ttf: $$(%.ttf_CIDFONT) $$(%.ttf_FEATURES) $$(%.ttf_SEQ
 	mkdir -p $(FONTS_OBJ)/source-han
 	# Do not immediately create the target file, so that make is interrupted
 	# it will restart again
-	afdko makeotfexe -f $($(notdir $@)_CIDFONT) -omitMacNames -ff $($(notdir $@)_FEATURES) \
+	makeotfexe -f $($(notdir $@)_CIDFONT) -omitMacNames -ff $($(notdir $@)_FEATURES) \
 		-lic ADOBE -mf $($(notdir $@)_MENUNAMEDB) -r -nS -cs 25 -ch $($(notdir $@)_UNISOURCE) \
 		-ci $($(notdir $@)_SEQUENCES) -o $@.tmp
-	afdko tx -cff +S -no_futile $($(notdir $@)_CIDFONT) $@.cff
+	tx -cff +S -no_futile $($(notdir $@)_CIDFONT) $@.cff
 	# sftnedit uses a hardcoded temporary file in the local directory, so we have
 	# to run it in a dedicated temporary directory to prevent concurrent instances
 	# to step onto each other's feet
-	(TEMP_DIR=`mktemp -d` && cd $$TEMP_DIR && afdko sfntedit -a CFF=$(abspath $($(notdir $@)).cff) $(abspath $@.tmp) && rm -fr $$TEMP_DIR)
+	(TEMP_DIR=`mktemp -d` && cd $$TEMP_DIR && sfntedit -a CFF=$(abspath $($(notdir $@)).cff) $(abspath $@.tmp) && rm -fr $$TEMP_DIR)
 	mv $@.tmp $@
 
 $(FONTS_OBJ)/ume-gothic/%.ttf: $$(%.ttf_FONT) $$(%.ttf_NAMETABLE_PATCH)
@@ -870,12 +911,12 @@ $(FONTS_OBJ)/ume-gothic/%.ttf: $$(%.ttf_FONT) $$(%.ttf_NAMETABLE_PATCH)
 	ttx -o $@ -m $($(notdir $@)_FONT) $(FONTS_OBJ)/ume-gothic/$(notdir $(basename $($(notdir $@)_NAMETABLE_PATCH))).ttx
 
 $(simsun.ttc): $(simsun.ttf) $(nsimsun.ttf)
-	afdko otf2otc -o $@.tmp $^
-	afdko otf2ttf -o $@ $@.tmp
+	otf2otc -o $@.tmp $^
+	otf2ttf -o $@ $@.tmp
 	rm $@.tmp
 
 $(msgothic.ttc): $(msgothic.ttf) $(mspgothic.ttf) $(msuigothic.ttf)
-	afdko otf2otc -o $@ $^
+	otf2otc -o $@ $^
 
 $(micross.ttf): $(FONTS)/scripts/merge.py $(noto_sans.ttf) $(noto_sans_arabic.ttf) $(noto_sans_armenian.ttf) $(noto_sans_bengali.ttf) $(noto_sans_coptic.ttf) \
 		$(noto_sans_georgian.ttf) $(noto_sans_gujarati.ttf) $(noto_sans_hebrew.ttf) $(noto_sans_khmer.ttf) $(noto_sans_tamil.ttf) \
@@ -1024,8 +1065,8 @@ all-dist: $(DIST_OVR32) $(DIST_OVR64)
 ##
 
 default_pfx: wine gst_good gst_bad gst_libav gst_plugins_rs lsteamclient steamexe vrclient wineopenxr dxvk dxvk-nvapi vkd3d-proton
-	find $(DST_LIBDIR32)/wine -type f -execdir chmod a-w '{}' '+'
-	find $(DST_LIBDIR64)/wine -type f -execdir chmod a-w '{}' '+'
+	find $(DST_LIBDIR32)/wine -type f -execdir chmod go-w '{}' '+'
+	find $(DST_LIBDIR64)/wine -type f -execdir chmod go-w '{}' '+'
 	rm -rf $(abspath $(DIST_PREFIX))
 	python3 $(SRCDIR)/default_pfx.py $(abspath $(DIST_PREFIX)) $(abspath $(DST_DIR))
 
@@ -1157,7 +1198,6 @@ ifeq ($(ENABLE_CCACHE),1)
 	export CCACHE_DIR := $(if $(CCACHE_DIR),$(CCACHE_DIR),$(HOME)/.ccache)
 	override DOCKER_OPTS := -v $(CCACHE_DIR):$(CCACHE_DIR)$(CONTAINER_MOUNT_OPTS) $(CCACHE_ENV) -e CCACHE_DIR=$(CCACHE_DIR) $(DOCKER_OPTS)
 else
-	export CCACHE_DISABLE := 1
 	override DOCKER_OPTS := $(CCACHE_ENV) -e CCACHE_DISABLE=1 $(DOCKER_OPTS)
 endif
 
@@ -1172,9 +1212,6 @@ ifeq ($(CONTAINER_ENGINE),)
 	CONTAINER_ENGINE := docker
 endif
 
-DOCKER_BASE = $(CONTAINER_ENGINE) run --rm -v $(SRC):$(SRC)$(CONTAINER_MOUNT_OPTS) -v $(OBJ):$(OBJ)$(CONTAINER_MOUNT_OPTS) \
-                -w $(OBJ) -e MAKEFLAGS \
-                $(DOCKER_OPTS) $(STEAMRT_IMAGE)
 
 .PHONY: dist deploy redist symstore-tarball
 .DEFAULT dist deploy redist symstore-tarball:
diff --git a/compatibilitytool.vdf.template b/compatibilitytool.vdf.template
index 5ac60e8b..e580cd20 100644
--- a/compatibilitytool.vdf.template
+++ b/compatibilitytool.vdf.template
@@ -14,7 +14,7 @@
       "install_path" "."
 
       // For this template, we're going to substitute the display_name key in here, e.g.:
-      "display_name" "##BUILD_NAME##"
+      "display_name" "##BUILD_NAME## (Unsupported AUR package [native])"
 
       "from_oslist"  "windows"
       "to_oslist"    "linux"
diff --git a/configure.sh b/configure.sh
index 3b5f7a4a..d9297162 100755
--- a/configure.sh
+++ b/configure.sh
@@ -128,6 +128,7 @@ function configure() {
     CONTAINER_MOUNT_OPTS=:Z
   fi
 
+  if [ "$arg_container_engine" != "none" ]; then
   if [[ -n "$arg_container_engine" ]]; then
     check_container_engine "$arg_container_engine" "$steamrt_image" || die "Specified container engine \"$arg_container_engine\" doesn't work"
   else
@@ -140,6 +141,7 @@ function configure() {
         die "${arg_container_engine:-Container engine discovery} has failed. Please fix your setup."
     fi
   fi
+  fi
 
   stat "Using $arg_container_engine."
 
diff --git a/make/rules-autoconf.mk b/make/rules-autoconf.mk
index 878640d2..e7baa574 100644
--- a/make/rules-autoconf.mk
+++ b/make/rules-autoconf.mk
@@ -29,9 +29,9 @@ $$(OBJ)/.$(1)-configure$(3): $$($(2)_SRC)/configure
 $$(OBJ)/.$(1)-build$(3):
 	@echo ":: building $(3)bit $(1)..." >&2
 	+cd "$$($(2)_OBJ$(3))" && env $$($(2)_ENV$(3)) \
-	$$(BEAR) $$(MAKE)
+	$$(BEAR) $$(MAKE) -j$$(SUBJOBS)
 	cd "$$($(2)_OBJ$(3))" && env $$($(2)_ENV$(3)) \
-	$$(MAKE) install
+	$$(MAKE) -j$$(SUBJOBS) install
 	touch $$@
 endef
 
diff --git a/make/rules-cargo.mk b/make/rules-cargo.mk
index d80ff9ed..00fa99fc 100644
--- a/make/rules-cargo.mk
+++ b/make/rules-cargo.mk
@@ -13,8 +13,10 @@ $$(OBJ)/.$(1)-configure$(3):
 $$(OBJ)/.$(1)-build$(3):
 	@echo ":: building $(3)bit $(1)..." >&2
 	cd $$($(2)_SRC) && env $$($(2)_ENV$(3)) \
+	cargo update --locked --offline --verbose --workspace
+	cd $$($(2)_SRC) && env $$($(2)_ENV$(3)) \
 	cargo build \
-	      $$(filter -j%,$$(MAKEFLAGS)) \
+	      -j$$(SUBJOBS) --locked --offline --verbose \
 	      --target "$$(CARGO_TARGET_$(3))" \
 	      --target-dir $$($(2)_OBJ$(3)) \
 	      $$(CARGO_BUILD_ARGS) \
diff --git a/make/rules-cmake.mk b/make/rules-cmake.mk
index 520d88ac..ab898810 100644
--- a/make/rules-cmake.mk
+++ b/make/rules-cmake.mk
@@ -28,9 +28,9 @@ $$(OBJ)/.$(1)-configure$(3): $$($(2)_SRC)/CMakeLists.txt
 $$(OBJ)/.$(1)-build$(3):
 	@echo ":: building $(3)bit $(1)..." >&2
 	cd "$$($(2)_OBJ$(3))" && env $$($(2)_ENV$(3)) \
-	$$(MAKE)
+	$$(MAKE) -j$$(SUBJOBS)
 	cd "$$($(2)_OBJ$(3))" && env $$($(2)_ENV$(3)) \
-	$$(MAKE) install
+	$$(MAKE) -j$$(SUBJOBS) install
 	touch $$@
 endef
 
diff --git a/make/rules-common.mk b/make/rules-common.mk
index 778c64e5..ae8be603 100644
--- a/make/rules-common.mk
+++ b/make/rules-common.mk
@@ -115,7 +115,11 @@ $(2)_LIBFLAGS$(3) = $$(foreach d,$$($(2)_DEPS$(3)),-L$$($$(d)_LIBDIR$(3))) \
 
 
 $(2)_ENV$(3) = \
+    WINEDEBUG="-all" \
+    WINEPREFIX="$$(OBJ)/pfx-wine$(3)" \
+    WINEDLLOVERRIDES="winemenubuilder=d;" \
     CARGO_TARGET_$$(call toupper,$$(CARGO_TARGET_$(3)))_LINKER="$$(TARGET_$(4)$(3))-gcc" \
+    CARGO_TARGET_$$(call toupper,$$(CARGO_TARGET_$(3)))_RUSTFLAGS="$$(RUSTFLAGS)" \
     CCACHE_BASEDIR="$$(CCACHE_BASEDIR)" \
     STRIP="$$(STRIP)" \
     AR="$$(TARGET_$(4)$(3))-ar" \
@@ -129,7 +133,7 @@ $(2)_ENV$(3) = \
     PATH="$$(call list-join,:,$$(foreach d,$$($(2)_DEPS$(3)),$$($$(d)_BINDIR$(3))),,:):$$$$PATH" \
     LD_LIBRARY_PATH="$$(call list-join,:,$$(foreach d,$$($(2)_DEPS$(3)),$$($$(d)_LIBDIR$(3))),,:)$$$$LD_LIBRARY_PATH" \
     PKG_CONFIG_PATH="$$(call list-join,:,$$(foreach d,$$($(2)_DEPS$(3)),$$($$(d)_LIBDIR$(3))/pkgconfig))" \
-    PKG_CONFIG_LIBDIR="/usr/lib/$$(PKG_CONFIG_TARGET_$(4)$(3))/pkgconfig:/usr/share/pkgconfig" \
+    PKG_CONFIG_LIBDIR="/usr/lib$(3)/pkgconfig:/usr/share/pkgconfig" \
     CFLAGS="$$($(2)_INCFLAGS$(3)) $$($(2)_CFLAGS) $$(COMMON_FLAGS) $$(COMMON_FLAGS$(3))" \
     CPPFLAGS="$$($(2)_INCFLAGS$(3)) $$($(2)_CPPFLAGS) $$(COMMON_FLAGS) $$(COMMON_FLAGS$(3))" \
     CXXFLAGS="$$($(2)_INCFLAGS$(3)) $$($(2)_CXXFLAGS) $$(COMMON_FLAGS) $$(COMMON_FLAGS$(3)) -std=c++17" \
@@ -154,7 +158,7 @@ $(2)_ENV$(3) += \
     CROSSCPPFLAGS="$$($(2)_INCFLAGS$(3)) $$($(2)_CPPFLAGS) $$(COMMON_FLAGS) $$(COMMON_FLAGS$(3))" \
     CROSSCXXFLAGS="$$($(2)_INCFLAGS$(3)) $$($(2)_CXXFLAGS) $$(COMMON_FLAGS) $$(COMMON_FLAGS$(3)) -std=c++17" \
     CROSSLDFLAGS="$$($(2)_LIBFLAGS$(3)) $$($(2)_LDFLAGS$(3)) $$($(2)_LDFLAGS) $$(CROSSLDFLAGS)" \
-    CROSSPKG_CONFIG_LIBDIR="/usr/lib/$$(PKG_CONFIG_TARGET_CROSS$(3))/pkgconfig:/usr/share/pkgconfig" \
+    CROSSPKG_CONFIG_LIBDIR="/usr/lib$(3)/pkgconfig:/usr/share/pkgconfig" \
 
 endif
 
@@ -167,14 +171,14 @@ else
 install-strip = objcopy -p --file-alignment=4096 --strip-debug $(1) $(2)/$(notdir $(1)) && rm -f $(2)/$(notdir $(1)).debug
 endif
 
-TARGET_32 := i686-linux-gnu
-TARGET_64 := x86_64-linux-gnu
+TARGET_32 := i686-pc-linux-gnu
+TARGET_64 := x86_64-pc-linux-gnu
 TARGET_CROSS32 := i686-w64-mingw32
 TARGET_CROSS64 := x86_64-w64-mingw32
 
-PKG_CONFIG_TARGET_32 := i386-linux-gnu
-PKG_CONFIG_TARGET_64 := x86_64-linux-gnu
-PKG_CONFIG_TARGET_CROSS32 := i386-w64-mingw32
+PKG_CONFIG_TARGET_32 := i686-pc-linux-gnu
+PKG_CONFIG_TARGET_64 := x86_64-pc-linux-gnu
+PKG_CONFIG_TARGET_CROSS32 := i686-w64-mingw32
 PKG_CONFIG_TARGET_CROSS64 := x86_64-w64-mingw32
 
 LIBDIR_WINE_32 := wine/i386-unix
diff --git a/make/rules-configure.mk b/make/rules-configure.mk
index a2205c1c..be2abd1a 100644
--- a/make/rules-configure.mk
+++ b/make/rules-configure.mk
@@ -25,9 +25,9 @@ $$(OBJ)/.$(1)-configure$(3):
 $$(OBJ)/.$(1)-build$(3):
 	@echo ":: building $(3)bit $(1)..." >&2
 	+cd "$$($(2)_OBJ$(3))" && env $$($(2)_ENV$(3)) \
-	$$(BEAR) $$(MAKE)
+	$$(BEAR) $$(MAKE) -j$$(SUBJOBS)
 	cd "$$($(2)_OBJ$(3))" && env $$($(2)_ENV$(3)) \
-	$$(MAKE) install
+	$$(MAKE) -j$$(SUBJOBS) install
 	touch $$@
 endef
 
diff --git a/make/rules-makedep.mk b/make/rules-makedep.mk
index 140cb8ea..686c8c1c 100644
--- a/make/rules-makedep.mk
+++ b/make/rules-makedep.mk
@@ -45,9 +45,9 @@ $$(OBJ)/.$(1)-configure$(3):
 $$(OBJ)/.$(1)-build$(3):
 	@echo ":: building $(3)bit $(1)..." >&2
 	+cd "$$($(2)_OBJ$(3))" && env $$($(2)_ENV$(3)) \
-	$$(BEAR) $$(MAKE)
+	$$(BEAR) $$(MAKE) -j$$(SUBJOBS)
 	cd "$$($(2)_OBJ$(3))" && env $$($(2)_ENV$(3)) \
-	$$(MAKE) install
+	$$(MAKE) -j$$(SUBJOBS) install
 	touch $$@
 endef
 
diff --git a/make/rules-meson.mk b/make/rules-meson.mk
index 985f2085..93860875 100644
--- a/make/rules-meson.mk
+++ b/make/rules-meson.mk
@@ -48,6 +48,7 @@ $$(OBJ)/.$(1)-configure$(3): $$($(2)_SRC)/meson.build
 
 	env $$($(2)_ENV$(3)) \
 	meson "$$($(2)_OBJ$(3))" "$$($(2)_SRC)" \
+	      --wrap-mode=nodownload \
 	      --prefix="$$($(2)_DST$(3))" \
 	      --libdir="lib$(subst 32,,$(3))" \
 	      --buildtype=plain \
@@ -61,7 +62,7 @@ $$(OBJ)/.$(1)-configure$(3): $$($(2)_SRC)/meson.build
 $$(OBJ)/.$(1)-build$(3):
 	@echo ":: building $(3)bit $(1)..." >&2
 	+env $$($(2)_ENV$(3)) \
-	ninja -C "$$($(2)_OBJ$(3))" install
+	ninja -j$$(SUBJOBS) -C "$$($(2)_OBJ$(3))" install $(-v?)
 	touch $$@
 endef
 
diff --git a/make/rules-winemaker.mk b/make/rules-winemaker.mk
index 5c3b59a3..ed6589e0 100644
--- a/make/rules-winemaker.mk
+++ b/make/rules-winemaker.mk
@@ -28,7 +28,7 @@ $$(OBJ)/.$(1)-build$(3):
 	@echo ":: building $(3)bit $(1)..." >&2
 	rsync -arx "$$($(2)_SRC)/" "$$($(2)_OBJ$(3))/"
 	env $$($(2)_ENV$(3)) \
-	$$(MAKE) -C "$$($(2)_OBJ$(3))" LIBRARIES="$$($(2)_LDFLAGS)"
+	$$(MAKE) -j$$(SUBJOBS) -C "$$($(2)_OBJ$(3))" LIBRARIES="$$($(2)_LDFLAGS)"
 	cd "$$($(2)_OBJ$(3))" && touch "$(basename $(4)).spec" && env $$($(2)_ENV$(3)) \
 	winebuild --$(lastword $(subst ., ,$(4))) --fake-module -E "$(basename $(4)).spec" -o "$(4).fake"
 	mkdir -p $$($(2)_LIBDIR$(3))/$(LIBDIR_WINE_$(3))
diff --git a/proton b/proton
index 7505ea84..839e63ca 100755
--- a/proton
+++ b/proton
@@ -474,7 +474,6 @@ class Proton:
         self.wine_bin = self.bin_dir + "wine"
         self.wine64_bin = self.bin_dir + "wine64"
         self.wineserver_bin = self.bin_dir + "wineserver"
-        self.dist_lock = FileLock(self.path("dist.lock"), timeout=-1)
 
     def path(self, d):
         return self.base_dir + d
@@ -1644,8 +1643,6 @@ if __name__ == "__main__":
 
     g_proton = Proton(os.path.dirname(sys.argv[0]))
 
-    g_proton.cleanup_legacy_dist()
-    g_proton.do_steampipe_fixups()
 
     g_compatdata = CompatData(os.environ["STEAM_COMPAT_DATA_PATH"])
 
@@ -1654,7 +1651,8 @@ if __name__ == "__main__":
     g_session.init_wine()
 
     if g_proton.missing_default_prefix():
-        g_proton.make_default_prefix()
+        log("Default prefix is missing, something is very wrong.")
+        sys.exit(1)
 
     g_session.init_session(sys.argv[1] != "runinprefix")
 
diff --git a/toolmanifest_runtime.vdf b/toolmanifest_runtime.vdf
index beddcbbb..5404093e 100644
--- a/toolmanifest_runtime.vdf
+++ b/toolmanifest_runtime.vdf
@@ -2,7 +2,6 @@
 {
   "version" "2"
   "commandline" "/proton %verb%"
-  "require_tool_appid" "1628350"
   "use_sessions" "1"
   "compatmanager_layer_name" "proton"
 }
-- 
2.47.0

