# Maintainer: Kiri <kiri@vern.cc>
# Contributor: Polarian <polarian@polarian.dev>

pkgname=saber
pkgver=0.24.5
pkgrel=1
pkgdesc="The cross-platform notes app built for handwriting"
arch=('x86_64')
url="https://github.com/saber-notes/saber"
license=('GPL-3.0-or-later')
depends=('at-spi2-core'
         'bash'
         'cairo'
         'fontconfig'
         'gcc-libs'
         'glib2'
         'glibc'
         'gtk3'
         'libepoxy'
         'libsecret'
         'pango'
         'hicolor-icon-theme'
         'gstreamer')
makedepends=('clang'
             'cmake'
             'fvm'
             'ninja'
             'patchelf'
             'gst-plugins-base-libs')
source=("${pkgname}-${pkgver}.tar.gz::${url}/archive/refs/tags/v${pkgver}.tar.gz"
        "saber.sh")
sha256sums=('c6d2d0eeb49dc52b9c21f7f394e38dc0fdc3ddd711cc0501c5b6092271456872'
            'a193df48dcff375178c415b40007c50517c97cc1b148bb0d1ee073042924aa27')

prepare() {
    cd "${pkgname}-${pkgver}"
    # avoid choice
    echo ".fvm/" >> .gitignore
    
    fvm install stable
    fvm use stable

    # Disable analytics and enable linux desktop
    fvm flutter --no-version-check config --no-analytics
    fvm flutter --no-version-check config --enable-linux-desktop

    # Pull dependencies within prepare, allowing for offline builds later on
    fvm flutter --no-version-check pub get
}

build() {
    cd "${pkgname}-${pkgver}"
    fvm flutter --no-version-check build linux --release --prefixed-errors

    # Copy icon to source directory for installing
    cp assets/icon/resized/icon-512x512.png ./saber.png
}

package() {
    # Copy icon to source directory for installing
    cd "${srcdir}/${pkgname}-${pkgver}"
    # Build directory for the final executable
    cd "${srcdir}/${pkgname}-${pkgver}/build/linux/x64/release/bundle"

    # Install application, licence and desktop file (with assets)
    install -Dm 755 saber "${pkgdir}/usr/share/${pkgname}/saber"
    install -Dm 644 lib/* -t "${pkgdir}/usr/lib/${pkgname}"
    cp -rdp --no-preserve=ownership data "${pkgdir}/usr/share/${pkgname}/data"
    ln -sr "${pkgdir}/usr/lib/${pkgname}" "${pkgdir}/usr/share/${pkgname}/lib"

    # Copy wrapper script to /usr/bin
    install -Dm 755 "${srcdir}/${pkgname}.sh" "${pkgdir}/usr/bin/${pkgname}"

    # Desktop entry
    install -Dm 644 -t "${pkgdir}/usr/share/applications" "${srcdir}/${pkgname}-${pkgver}/flatpak/com.adilhanney.saber.desktop"

    # Install images
    cd "${srcdir}/${pkgname}-${pkgver}/assets/icon/resized"
    for res in 16x16 24x24 32x32 48x48 64x64 128x128 256x256 512x512
        do
            install -Dm 644 icon-${res}.png "${pkgdir}/usr/share/icons/hicolor/${res}/apps/com.adilhanney.saber.png"
        done

    # Fix rpath which cause "Insecure RUNPATH" or "outside of a valid path"
    # Fix .so files using patchelf
    cd "${pkgdir}/usr/lib/${pkgname}"
    for file in *.so; do
        PATCHELF_OUTPUT=$(patchelf --print-rpath $file)
        echo "Checking $file: $PATCHELF_OUTPUT"
    # Skip file if PATCHELF_OUTPUT does not contain CURRENT_DIR
        if [[ ! $PATCHELF_OUTPUT =~ $CURRENT_DIR ]]; then
            echo "Skipping $file"
            continue
        fi
    # Remove rpath if it not contain ORIGIN before
        if [[ ! $PATCHELF_OUTPUT =~ 'ORIGIN' ]]; then
            echo "Removing rpath for $file"
            patchelf --remove-rpath $file
            continue
        fi
    # Set rpath to ORIGIN if it contain ORIGIN before
        echo "Setting ORIGIN rpath for $file"
        patchelf --set-rpath '$ORIGIN' $file
    done
}
