#!/usr/bin/env bash
# shellcheck disable=SC2034 disable=SC2048 disable=SC2086 disable=SC2154

# This PKGBUILD is/was authored by:
# - JeremyStarTM <jeremystartm@staropensource.de>
# - yarost12 <yaro330@gmail.com>
# - Josip Ponjavic <josipponjavic at gmail dot com>
#
# For a list of maintainers see MAINTAINERS.md

### BUILD OPTIONS
# You can modify these settings by executing "env _<setting>=<value> makepkg"
# instead of modifying the PKGBUILD file. Here's an example:
# env _makemenuconfig=y _copyfinalconfig=y _subarch=30 makepkg

# Tweak kernel options prior to a build via menuconfig.
#
# Set to anything but null to activate.
: "${_makemenuconfig:=""}"

# Tweak kernel options prior to a build via nconfig.
#
# Set to anything but null to activate.
: "${_makenconfig:=""}"

# Tweak kernel options prior to a build via xconfig.
#
# Set to anything but null to activate.
: "${_makexconfig:=""}"

# Use the current kernel's .config file
# Enabling this option will use the .config of the currently
# running kernel rather than the Arch Linux defaults. Useful
# when the package gets updated and you already went through
# the trouble of customizing your config options. NOT recommended
# when a new kernel is released, but again, convenient
# for package bumps.
#
# Set to anything but null to activate.
: "${_use_current:=""}"

# Apply selected optimizations chosen by
# the package maintainers to the config.
#
# Only takes effect if '_use_current'
# is enabled. Keep disabled if you want
# to reuse your existing kernel configuration
# without any changes being applied to it.
#
# Set to anything but null to activate.
: "${_optimize_defconfig:=""}"

# Determines whether the kernel configuration should be
# copied into the source tree before compilation starts.
#
# Set to anything but null to activate.
: "${_copyfinalconfig:=""}"

# Only compile active modules to VASTLY reduce the number
# of modules built and the build time.
#
# To keep track of which modules are needed for your specific system/hardware,
# give modprobed-db a try: https://aur.archlinux.org/packages/modprobed-db
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
# Set to anything but null to activate.
: "${_localmodcfg:=""}"

# Optionally select a sub architecture by number or its Kconfig name,
# for example MCORE2 or MZEN4.
#
# Leaving it blank will require user interaction during the build.
# Note that the default option is empty.
#
# Important notice for maintainers:
# Make sure to update the '_subarch'
# section inside update_defconfig()
# if this list is updated on updating
# the kernel compiler patchset.
#
#  1. Build and optimize for local/native CPU (X86_NATIVE_CPU)
#  2. Generic-x86-64 (GENERIC_CPU)
#  3. Intel-Native optimizations autodetected by the compiler (MNATIVE_INTEL)
#  4. AMD-Native optimizations autodetected by the compiler (MNATIVE_AMD)
#  5. AMD Opteron/Athlon64/Hammer/K8 (MK8)
#  6. AMD Opteron/Athlon64/Hammer/K8 with SSE3 (MK8SSE3)
#  7. AMD 61xx/7x50/PhenomX3/X4/II/K10 (MK10)
#  8. AMD Barcelona (MBARCELONA)
#  9. AMD Bobcat (MBOBCAT)
#  10. AMD Jaguar (MJAGUAR)
#  11. AMD Bulldozer (MBULLDOZER)
#  12. AMD Piledriver (MPILEDRIVER)
#  13. AMD Steamroller (MSTEAMROLLER)
#  14. AMD Excavator (MEXCAVATOR)
#  15. AMD Ryzen (MZEN)
#  16. AMD Ryzen 2 (MZEN2)
#  17. AMD Ryzen 3 (MZEN3)
#  18. AMD Ryzen 4 (MZEN4)
#  19. AMD Ryzen 5 (MZEN5)
#  20. Intel P4 / older Netburst based Xeon (MPSC)
#  21. Intel Core 2 (MCORE2)
#  22. Intel Nehalem (MNEHALEM)
#  23. Intel Westmere (MWESTMERE)
#  24. Intel Silvermont (MSILVERMONT)
#  25. Intel Goldmont (MGOLDMONT)
#  26. Intel Goldmont Plus (MGOLDMONTPLUS)
#  27. Intel Sandy Bridge (MSANDYBRIDGE)
#  28. Intel Ivy Bridge (MIVYBRIDGE)
#  29. Intel Haswell (MHASWELL)
#  30. Intel Broadwell (MBROADWELL)
#  31. Intel Skylake (MSKYLAKE)
#  32. Intel Skylake X (MSKYLAKEX)
#  33. Intel Cannon Lake (MCANNONLAKE)
#  34. Intel Ice Lake (MICELAKE_CLIENT)
#  35. Intel Ice Lake Server (MICELAKE_SERVER)
#  36. Intel Cooper Lake (MCOOPERLAKE)
#  37. Intel Cascade Lake (MCASCADELAKE)
#  38. Intel Tiger Lake (MTIGERLAKE)
#  39. Intel Sapphire Rapids (MSAPPHIRERAPIDS)
#  40. Intel Rocket Lake (MROCKETLAKE)
#  41. Intel Alder Lake (MALDERLAKE)
#  42. Intel Raptor Lake (MRAPTORLAKE)
#  43. Intel Meteor Lake (MMETEORLAKE)
#  44. Intel Emerald Rapids (MEMERALDRAPIDS)
: "${_subarch:=""}"

# Selects the x86-64 microarchitecture to compile for.
# This value is only used by the GENERIC_CPU
# subarchitecture and is required.
# Can be either '1', '2', '3' or '4'
#
# Set to '1' by default
#
# For more information see:
# https://en.wikipedia.org/wiki/X86-64#Microarchitecture_levels
: "${_subarch_microarch:="1"}"


# Enable compilation with LLVM
# Be warned, this is largely untested by me (JeremyStarTM). It *should* work,
# but if it doesn't, write a comment and I'll fix it.
#
# Set to anything but null to activate.
: "${_use_llvm_lto:=""}"

# Debug options
# This allows you to enable or disable debug options.
# Set to 'y' to force enable, 'n' to force disable or '' to ignore debug options.
# Leaving the setting empty will use the kernel configuration setting to determine
# if debug options shall be enabled/disabled.
#
# Set to anything but null to activate.
: "${_debug:=""}"

### BUILD OPTIONS END

### DEPRECATED BUILD OPTIONS START

# See '_use_current'
: "${_reuse_current:=""}"

# See '_optimize_defconfig'
: "${_update_kconfig_on_reuse:=""}"

# Show full compilation output
# This used to control whether normal build
# or some magic pv output should be
# displayed while the kernel is compiling.
: "${_show_compile:=""}"

### DEPRECATED BUILD OPTIONS END


# Kernel version
_kernel_major=6.15
_kernel_minor=4
# Clear Linux patches version
_clr=6.15.3-1586
# kernel_compiler_patch version
_kernelcompilerpatch="20250612"
# kernel_compiler_patch name
_kernelcompilername="more-ISA-levels-and-uarches-for-kernel-6.15-rc1+.patch"
# Source directory names
_src_linux=linux-${_kernel_major}

# Package information
pkgbase=linux-clear
pkgver=${_kernel_major}.${_kernel_minor}
pkgrel=2
pkgdesc="Linux kernel with patches from Clear Linux which allow for higher performance."
arch=("x86_64")
url="https://git.staropensource.de/JeremyStarTM/aur-linux-clear"
license=(GPL-2.0-only)
makedepends=("bc" "cpio" "gettext" "git" "libelf" "pahole" "perl" "pv" "python" "tar" "xz" "zstd")
[ -n "${_use_llvm_to}" ] && makedepends+=("clang" "llvm" "lld")
options=("!strip" "!debug")
[ "${_debug}" == "y" ] && options=("!strip")
source=(
  "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${_kernel_major}.tar.xz"
  "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${_kernel_major}.tar.sign"
  "https://cdn.kernel.org/pub/linux/kernel/v6.x/patch-${_kernel_major}.${_kernel_minor}.xz"
  "cl-linux::git+https://github.com/clearlinux-pkgs/linux.git#tag=${_clr}"
  "more-uarches-${_kernelcompilerpatch}.tar.gz::https://github.com/graysky2/kernel_compiler_patch/archive/${_kernelcompilerpatch}.tar.gz"
)

[ -n "${_use_llvm_lto}" ] && BUILD_FLAGS=("LLVM=1" "LLVM_IAS=1")

export "KBUILD_BUILD_HOST=archlinux"
export "KBUILD_BUILD_USER=${pkgbase}"
export "KBUILD_BUILD_TIMESTAMP=$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

# Check for deprecated settings
_check_deprecated_settings() {
    if [ -n "${_update_kconfig_on_reuse}" ]; then
        warning "Please switch to using '_update_kconfig_on_reuse' flag instead of '_optimize_defconfig'"
        _optimize_defconfig="y"
    fi
    if [ -n "${_reuse_current}" ]; then
        warning "Please switch to using '_use_current' flag instead of '_reuse_current'"
        _use_current="y"
    fi
    [ -n "${_show_compile}" ] && warning "'_show_compile' is no longer supported"

    # To avoid an error
    true
}

_get_patches() {
    # set -x
    local spec_file="${srcdir}/cl-linux/linux.spec"

    # 1. Search for patches in the linux.spec file
    #    Matches lines starting exactly with: %patch followed immediately by digits.
    #    This implicitly ignores commented-out lines.
    # 2. Pipe the grep output to sed to extract the patch number.
    #    Captures the digits immediately following '%patch'.
    local applied_patch_numbers=$(grep -E '^%patch[0-9]+' $spec_file | sed -E 's/^%patch([0-9]+).*/\1/')

    # Check if any patch numbers were found
    if [ -z "$applied_patch_numbers" ]; then
        error "No applied '%patchXXXX' directives found in the %prep section."
        exit 0
    fi

    # 4. Iterate through the extracted patch numbers
    while IFS= read -r num; do
        # 5. For each number, find the corresponding uncommented 'PatchXXXX:' line.
        #    Grep for lines starting exactly with 'Patch', the number, ':', and optional whitespace.
        patch_line=$(grep -E "^Patch${num}:[[:space:]]*" "$spec_file")

        # 6. Check if a corresponding PatchXXXX line was found
        if [ -n "$patch_line" ]; then
            # 7. Extract the filename part after the first ': ' delimiter.
            #    Remove the "Patch0XXX: " prefix using bash substr removal
            echo "${patch_line#Patch[0-9]*:[[:space:]]}"
        else
            # Output a warning if the definition line is missing (shouldn't happen with valid spec files)
            warning "Warning: Could not find definition line 'Patch${num}:' for applied patch number $num"
        fi
    done <<< "$applied_patch_numbers" # Feed the numbers into the loop
}

# Applies all patches
_apply_patches() {
    set -x
    # Patch with kernel version patches
    patch -Np1 -i ../patch-${_kernel_major}.${_kernel_minor} || true

    # Set version
    echo "-${pkgrel}" > localversion.10-pkgrel
    echo "${pkgbase#linux}" > localversion.20-pkgname

    # Patch with Clear Linux patches
    for i in $(_get_patches); do
        echo "Applying $i"
        if [ -n "${_use_llvm_lto}" ]; then
            if [ "${i}" == "0133-novector.patch" ] ; then
                continue
            fi
        fi

        patch -Np1 -i "${srcdir}/cl-linux/${i}" || true
    done

    # Patch with kernel_compiler_patch patches.
    # Do this before any defconfig invocations so we
    # have all of the extra selectable uarches ready and selectable
    patch -Np1 -i "$srcdir/kernel_compiler_patch-${_kernelcompilerpatch}/${_kernelcompilername}"
}

# Allows user to modify the kernel config
_modify_defconfig() {
    [ -n "$_makemenuconfig" ] && make ${BUILD_FLAGS[*]} menuconfig
    [ -n "$_makexconfig" ] && make ${BUILD_FLAGS[*]} xconfig
    [ -n "$_makenconfig" ] && make ${BUILD_FLAGS[*]} nconfig

    # Don't crash if all three are false
    true
}

# Copies the kernel config
_copy_defconfig() {
    local _cur_major_ver="$(uname -r | grep -o '[0-9]*[0-9]\.[0-9]*[0-9]')"
    [ "${_cur_major_ver}" != "${_kernel_major}" ] &&
        warning "Major version was updated, you should regen the defconfig"

    if [ -s /proc/config.gz ]; then
        # modprobe configs
        zcat /proc/config.gz > ./.config
        make ${BUILD_FLAGS[*]} olddefconfig
    else
        warning "Your kernel was not compiled with IKCONFIG_PROC."
        warning "Unable to read kernel configuration, aborting."
        exit
    fi
}

# Updates the kernel config
_update_defconfig() {
    # Copy configuration file (if found)
    if [ -f "${startdir}/kconfig" ]; then
        echo ":: Using configuration file \"${startdir}/kconfig\""
        cp -Tf "${startdir}/kconfig" ./.config
    else
        echo ":: Using configuration file \"${srcdir}/${pkgbase}/config\""
        cp -Tf $srcdir/cl-linux/config ./.config
    fi

    # Extra configuration
    # General setup
    scripts/config --set-str DEFAULT_HOSTNAME archlinux \
                -e IKCONFIG \
                -e IKCONFIG_PROC \
                -u RT_GROUP_SCHED
    # Power management and ACPI options
    scripts/config -e ACPI_REV_OVERRIDE_POSSIBLE \
                -e ACPI_TABLE_UPGRADE
    # Virtualization
    scripts/config -e KVM_SMM
    # General architecture-dependent options
    scripts/config -e KPROBES
    # Enable loadable module support
    scripts/config -u MODULE_SIG_FORCE
    # Networking support
    scripts/config -e NETFILTER_INGRESS
    # Device Drivers
    scripts/config -e FRAMEBUFFER_CONSOLE_DEFERRED_TAKEOVER \
                -e DELL_SMBIOS_SMM \
                -m PATA_JMICRON \
                -E SOUND SOUND_OSS_CORE \
                -e SND_OSSEMUL \
                -M SND_OSSEMUL SND_MIXER_OSS \
                -M SND_MIXER_OSS SND_PCM_OSS \
                -E SND_PCM_OSS SND_PCM_OSS_PLUGINS \
                -m AGP -M AGP AGP_INTEL -M AGP_INTEL AGP_VIA
    # Kernel hacking -> Compile-time checks and compiler options -> Make section mismatch errors non-fatal
    scripts/config -e SECTION_MISMATCH_WARN_ONLY
    # File systems
    scripts/config -m NTFS3_FS \
                -e NTFS3_LZX_XPRESS \
                -e NTFS3_FS_POSIX_ACL
    scripts/config -m SMB_SERVER \
                -e SMB_SERVER_SMBDIRECT \
                -e SMB_SERVER_CHECK_CAP_NET_ADMIN \
                -e SMB_SERVER_KERBEROS5
    # Security options
    scripts/config -e SECURITY_SELINUX \
                -e SECURITY_SELINUX_BOOTPARAM \
                -e SECURITY_SMACK \
                -e SECURITY_SMACK_BRINGUP \
                -e SECURITY_SMACK_NETFILTER \
                -e SECURITY_SMACK_APPEND_SIGNALS \
                -e SECURITY_TOMOYO \
                -e SECURITY_APPARMOR \
                -e SECURITY_YAMA
    # Security options -> Landlock options
    scripts/config -e SECURITY_LANDLOCK
    # Library routines
    scripts/config -k -e FONT_TER16x32

    # EDAC enablement for modern CPUs
    scripts/config -e EDAC_AMD64 \
                -e EDAC_IGEN6

    # Enable LLVM compilation
    [ -n "${_use_llvm_lto}" ] && scripts/config -d LTO_NONE \
                                                -e LTO \
                                                -e LTO_CLANG \
                                                -e ARCH_SUPPORTS_LTO_CLANG \
                                                -e ARCH_SUPPORTS_LTO_CLANG_THIN \
                                                -e HAS_LTO_CLANG \
                                                -e LTO_CLANG_THIN \
                                                -e HAVE_GCC_PLUGINS

    # Enable or disable debug settings
    [ "${_debug}" == "y" ] && scripts/config -e DEBUG_INFO \
                                            -e DEBUG_INFO_BTF \
                                            -e DEBUG_INFO_DWARF4 \
                                            -e PAHOLE_HAS_SPLIT_BTF \
                                            -e DEBUG_INFO_BTF_MODULES
    [ "${_debug}" == "n" ] && scripts/config -d DEBUG_INFO \
                                            -d DEBUG_INFO_BTF \
                                            -d DEBUG_INFO_DWARF4 \
                                            -d PAHOLE_HAS_SPLIT_BTF \
                                            -d DEBUG_INFO_BTF_MODULES

    # Run olddefconfig
    make ${BUILD_FLAGS[*]} olddefconfig
    diff -u $srcdir/cl-linux/config .config || :

    # Here we slightly break the config by removing one of the
    # members of the 'Processor family' selection.
    # This causes oldconfig to always invoke that selection.
    sed -i '/CONFIG_GENERIC_CPU/d' .config || :
    # For a slim chance that someone is building X86_32
    sed -i '/CONFIG_M686/d' .config || :

    case ${_subarch} in
        "")
            # Ask for subarch if none provided
            make "${BUILD_FLAGS[@]}" oldconfig
            ;;
        "41" | "GENERIC_CPU")
            scripts/config -e GENERIC_CPU
            scripts/config --set-val X86_64_VERSION "${_subarch_microarch}"
            make "${BUILD_FLAGS[@]}" oldconfig
            ;;
        [1-9]|[1-3][0-9]|[4][0-3]|43)
            # 1 to 9, 10 to 39, 40 to 43
            # 43 is the last supported value here, refer to the _subarch
            # documentation above and keep the last section of this check
            # in sync with the supported value.
            # stderr checks below shouldn't be needed with the above check in place,
            # but will be left in-place regardless in case of future updates
            # breaking something

            # We're only interested in stderr
            {
                local __ERROR=$(echo "${_subarch}" | make "${BUILD_FLAGS[@]}" oldconfig 2>&1 1>&$out)
            } {out}>/dev/null

            # Invoke echo to sanitize the __ERROR, it can contain a newline or a \r
            # symbol, thus breaking the script
            if [ -n "$(echo $__ERROR)" ]; then
                warning "Selected subarch: ${_subarch} is not supported"
                exit
            fi
            ;;
        *)
            # String - check if it exists in .config and if it does - set it
            if grep -q -e "CONFIG_${_subarch}[[:space:]]" -e "CONFIG_${_subarch}=" .config; then
                # Check if option exists in .config
                scripts/config -e "${_subarch}"
                make "${BUILD_FLAGS[@]}" olddefconfig
            else
                warning "Unrecognized subarch value: ${_subarch}"
                exit
            fi
            ;;
    esac
}

# Prepares the installation
prepare() {
    cd "${_src_linux}" || exit 1

    _check_deprecated_settings
    _apply_patches

    [ -n "${_use_current}" ] && _copy_defconfig
    [ -n "${_optimize_defconfig}" ] || [ -z "${_use_current}" ] && _update_defconfig

    # Read and apply modprobed database
    # See https://aur.archlinux.org/packages/modprobed-db
    if [ -n "${_localmodcfg}" ]; then
        if [ -e "${HOME}/.config/modprobed.db" ]; then
            make ${BUILD_FLAGS[*]} LSMOD=${HOME}/.config/modprobed.db localmodconfig
        else
            echo ":: No modprobed.db file was found at ${HOME}/.config, skipping"
        fi
    fi

    # Open configuration editors
    _modify_defconfig

    # Save configuration
    # shellcheck disable=SC2015
    [ -n "${_copyfinalconfig}" ] && cp -Tf ./.config "${startdir}/kconfig-new" || true

    # Write kernel version
    make -s kernelrelease > version
}

# Build kernel
build() {
    cd "${_src_linux}" || exit 1
    make ${BUILD_FLAGS[*]} all
}

# Packages the kernel package
_package() {
    pkgdesc="${pkgdesc} This package includes the kernel and compiled modules."
    depends=("coreutils" "kmod" "initramfs")
    optdepends=("wireless-regdb: to set the correct wireless channels of your country"
                "linux-firmware: firmware images needed for some devices")
    provides=("KSMBD-MODULE" "VIRTUALBOX-GUEST-MODULES" "WIREGUARD-MODULE" "linux-clear-x64-v3" "linux-clear-x64-v4")
    install=linux.install

    cd "${_src_linux}" || exit 1
    local "modulesdir=${pkgdir}/usr/lib/modules/$(<version)"

    # Create boot image
    # systemd expects to find the kernel there to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make -s image_name)" "${modulesdir}/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "${pkgbase}" | install -Dm644 /dev/stdin "${modulesdir}/pkgbase"

    # Install modules
    ZSTD_CLEVEL=19 make ${BUILD_FLAGS[*]} INSTALL_MOD_PATH="${pkgdir}/usr" INSTALL_MOD_STRIP=1 \
        DEPMOD=/doesnt/exist modules_install  # Suppress depmod

    # Remove build directory
    rm "${modulesdir}"/build
}

# Packages the headers package
_package-headers() {
    pkgdesc="${pkgdesc} This package includes header files and scripts for building kernel modules."
    depends=("pahole")

    cd "${_src_linux}" || exit 1
    local "builddir=${pkgdir}/usr/lib/modules/$(<version)/build"

    install -Dt "${builddir}" -m644 .config Makefile Module.symvers System.map \
        localversion.* version vmlinux
    install -Dt "${builddir}/kernel" -m644 kernel/Makefile
    install -Dt "${builddir}/arch/x86" -m644 arch/x86/Makefile
    cp -t "${builddir}" -a scripts

    # Required when STACK_VALIDATION is enabled
    install -Dt "${builddir}/tools/objtool" tools/objtool/objtool

    # Required when DEBUG_INFO_BTF_MODULES is enabled
    [ -f tools/bpf/resolve_btfids/resolve_btfids ] && install -Dt "${builddir}/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

    cp -t "${builddir}" -a include
    cp -t "${builddir}/arch/x86" -a arch/x86/include
    install -Dt "${builddir}/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

    install -Dt "${builddir}/drivers/md" -m644 drivers/md/*.h
    install -Dt "${builddir}/net/mac80211" -m644 net/mac80211/*.h

    # https://bugs.archlinux.org/task/13146
    install -Dt "${builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # https://bugs.archlinux.org/task/20402
    install -Dt "${builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "${builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "${builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    # https://bugs.archlinux.org/task/71392
    install -Dt "${builddir}/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

    find . -name 'Kconfig*' -exec install -Dm644 {} "${builddir}/{}" \;

    # Remove redundant architectures
    local arch
    for arch in "${builddir}"/arch/*/; do
        [[ $arch = */x86/ ]] && continue
        echo "Removing $(basename "${arch}")"
        rm -r "${arch}"
    done

    # Remove documentation
    rm -r "${builddir}/Documentation"

    # Remove broken symlinks
    find -L "${builddir}" -type l -printf "Removing %P\n" -delete

    # Remove loose objects
    find "${builddir}" -type f -name '*.o' -printf "Removing %P\n" -delete

    # Strip build tools
    local file
    while read -rd "" file; do
        case "$(file -Sib "$file")" in
            application/x-sharedlib\;*)      # Libraries (.so)
                strip -v $STRIP_SHARED "$file" ;;
            application/x-archive\;*)        # Libraries (.a)
                strip -v $STRIP_STATIC "$file" ;;
            application/x-executable\;*)     # Binaries
                strip -v $STRIP_BINARIES "$file" ;;
            application/x-pie-executable\;*) # Relocatable binaries
                strip -v $STRIP_SHARED "$file" ;;
        esac
    done < <(find "${builddir}" -type f -perm -u+x ! -name vmlinux -print0)

    # Strip vmlinux
    strip -v $STRIP_STATIC "${builddir}/vmlinux"

    # Add symlink to build directory
    mkdir -p "$pkgdir/usr/src"
    ln -sr "${builddir}" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#"$pkgbase"}")
    _package${_p#"$pkgbase"}
  }"
done

# Taken from https://www.kernel.org/signature.html
validpgpkeys=(
  "ABAF11C65A2970B130ABE3C479BE3E4300411886"  # Linus Torvalds (torvalds@kernel.org)
  "647F28654894E3BD457199BE38DBBDC86092693E"  # Greg Kroah-Hartman (gregkh@kernel.org)
  "E27E5D8A3403A2EF66873BBCDEA66FF797772CDC"  # Sasha Levin (sashal@kernel.org)
  "AC2B29BD34A6AFDDB3F68F35E7BFC8EC95861109"  # Ben Hutchings (benh@debian.org)
)
sha256sums=("7586962547803be7ecc4056efc927fb25214548722bd28171172f3599abb9764"
            "SKIP"
            "64d5ed5bd25723410e56b5957de66aaf9864402bda408bc5d609765917e54b2d"
            "SKIP"
            "91adc6bf4b263480399d24a7640e11b0302d4b411910ee99eee2788b34bd297a")
replaces=("linux-clear-x64-v3" "linux-clear-x64-v4")
