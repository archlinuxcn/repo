From c32a2aadb57eaf7ab396d752d98caee5ce45b088 Mon Sep 17 00:00:00 2001
From: Wind He <g311571057@gmail.com>
Date: Fri, 23 Aug 2024 23:04:39 +0800
Subject: [PATCH] feat: customize what options to sync

Write your config as ~/.config/kdegtkrc like this: 

[General]
Cursor=true
Font=false
Icon=true
TextScale=false

[Options]
Cursor=Adwaita
Font=Sans Serif,12
TextScale=1.25
Theme=Papirus-Light

---
 kded/CMakeLists.txt          |  7 +++++
 kded/configvalueprovider.cpp | 58 ++++++++++++++++++++++++++++++++----
 kded/configvalueprovider.h   |  4 +++
 kded/gtkconfig.cpp           | 32 +++++++++++++++++++-
 kded/gtkconfig.h             |  2 ++
 5 files changed, 96 insertions(+), 7 deletions(-)

diff --git a/kded/CMakeLists.txt b/kded/CMakeLists.txt
index b90f817..195c9aa 100644
--- a/kded/CMakeLists.txt
+++ b/kded/CMakeLists.txt
@@ -10,6 +10,13 @@ set(gtkconfig_SRCS
     themepreviewer.cpp
 )
 
+include(ECMQtDeclareLoggingCategory)
+ecm_qt_declare_logging_category(gtkconfig_SRCS
+    HEADER gtkconfig-debug.h
+    IDENTIFIER "LOG_GTKCONFIG"
+    CATEGORY_NAME "gtkconfig"
+)
+
 qt_add_dbus_adaptor(gtkconfig_SRCS
     gsd-xsettings-manager/org.gtk.Settings.xml
     gsd-xsettings-manager/gsd-xsettings-manager.h
diff --git a/kded/configvalueprovider.cpp b/kded/configvalueprovider.cpp
index 85e55f9..46cf6f6 100644
--- a/kded/configvalueprovider.cpp
+++ b/kded/configvalueprovider.cpp
@@ -21,6 +21,8 @@
 #include <gtk/gtk.h>
 
 #include <algorithm>
+#include <kconfiggroup.h>
+#include <qstringliteral.h>
 
 #include "configvalueprovider.h"
 #include "decorationpainter.h"
@@ -36,22 +38,48 @@ ConfigValueProvider::ConfigValueProvider()
     , fontsConfig(KSharedConfig::openConfig(QStringLiteral("kcmfonts")))
     , inputConfig(KSharedConfig::openConfig(QStringLiteral("kcminputrc")))
     , kwinConfig(KSharedConfig::openConfig(QStringLiteral("kwinrc")))
+    , kdeGtkConfig(KSharedConfig::openConfig(QStringLiteral("kdegtkrc"), KConfig::NoGlobals))
     , generatedCSDTempPath(QDir::tempPath() + QStringLiteral("/plasma-csd-generator"))
 {
 }
 
+QMap<QString, bool> ConfigValueProvider::syncedOptions() const
+{
+    KConfigGroup configGroup = kdeGtkConfig->group(QStringLiteral("General"));
+    QMap<QString, bool> options = {};
+    for (QString option : configGroup.entryMap().keys()) {
+        options[option] = configGroup.readEntry(option, true);
+    }
+
+    return options;
+}
+
 QString ConfigValueProvider::fontName() const
 {
     static const QFont defaultFont(QStringLiteral("Noto Sans"), 10);
 
-    KConfigGroup configGroup = kdeglobalsConfig->group(QStringLiteral("General"));
-    QString fontAsString = configGroup.readEntry(QStringLiteral("font"), defaultFont.toString());
+    KConfigGroup globalConfigGroup = kdeglobalsConfig->group(QStringLiteral("General"));
+    KConfigGroup isSyncCOnfigGroup = kdeGtkConfig->group(QStringLiteral("General"));
+    KConfigGroup kdegtkConfigGroup = kdeGtkConfig->group(QStringLiteral("Options"));
+
+    QString fontAsString;
+    if (isSyncCOnfigGroup.readEntry(QStringLiteral("Font"), false)) {
+        fontAsString = globalConfigGroup.readEntry(QStringLiteral("font"), defaultFont.toString());
+    } else {
+        fontAsString = kdegtkConfigGroup.readEntry(QStringLiteral("Font"), defaultFont.toString());
+    }
     static QFont font;
     font.fromString(fontAsString);
     const QString fontStyle = fontStyleHelper(font);
     return font.family() + QStringLiteral(", ") + fontStyle + ' ' + QString::number(font.pointSize());
 }
 
+double ConfigValueProvider::textScalingFactor() const
+{
+    KConfigGroup configGroup = kdeGtkConfig->group(QStringLiteral("Options"));
+    return configGroup.readEntry(QStringLiteral("TextScale"), .0f);
+}
+
 QString ConfigValueProvider::fontStyleHelper(const QFont &font) const
 {
     // BUG: 333146
@@ -115,14 +143,32 @@ QString ConfigValueProvider::fontStyleHelper(const QFont &font) const
 
 QString ConfigValueProvider::iconThemeName() const
 {
-    KConfigGroup configGroup = kdeglobalsConfig->group(QStringLiteral("Icons"));
-    return configGroup.readEntry(QStringLiteral("Theme"), QStringLiteral("breeze"));
+    KConfigGroup globalConfigGroup = kdeglobalsConfig->group(QStringLiteral("Icons"));
+    KConfigGroup isSyncCOnfigGroup = kdeGtkConfig->group(QStringLiteral("General"));
+    KConfigGroup kdegtkConfigGroup = kdeGtkConfig->group(QStringLiteral("Options"));
+
+    QString iconTheme;
+    if (isSyncCOnfigGroup.readEntry(QStringLiteral("Icon"), false)) {
+        iconTheme = globalConfigGroup.readEntry(QStringLiteral("Theme"), QStringLiteral("breeze"));
+    } else {
+        iconTheme = kdegtkConfigGroup.readEntry(QStringLiteral("Icon"), QStringLiteral("breeze"));
+    }
+    return iconTheme;
 }
 
 QString ConfigValueProvider::cursorThemeName() const
 {
-    KConfigGroup configGroup = inputConfig->group(QStringLiteral("Mouse"));
-    return configGroup.readEntry(QStringLiteral("cursorTheme"), QStringLiteral("breeze_cursors"));
+    KConfigGroup inputConfigGroup = inputConfig->group(QStringLiteral("Mouse"));
+    KConfigGroup isSyncCOnfigGroup = kdeGtkConfig->group(QStringLiteral("General"));
+    KConfigGroup kdegtkConfigGroup = kdeGtkConfig->group(QStringLiteral("Options"));
+
+    QString cursorTheme;
+    if (isSyncCOnfigGroup.readEntry(QStringLiteral("Cursor"), false)) {
+        cursorTheme = inputConfigGroup.readEntry(QStringLiteral("cursorTheme"), QStringLiteral("breeze_cursors"));
+    } else {
+        cursorTheme = kdegtkConfigGroup.readEntry(QStringLiteral("Cursor"), QStringLiteral("breeze_cursors"));
+    }
+    return cursorTheme;
 }
 
 QString ConfigValueProvider::soundThemeName() const
diff --git a/kded/configvalueprovider.h b/kded/configvalueprovider.h
index 88f4e33..9916a06 100644
--- a/kded/configvalueprovider.h
+++ b/kded/configvalueprovider.h
@@ -18,7 +18,10 @@ class ConfigValueProvider
 public:
     ConfigValueProvider();
 
+    QMap<QString, bool> syncedOptions() const;
+
     QString fontName() const;
+    double textScalingFactor() const;
     QString iconThemeName() const;
     QString cursorThemeName() const;
     QString soundThemeName() const;
@@ -56,6 +59,7 @@ private:
     KSharedConfigPtr fontsConfig;
     KSharedConfigPtr inputConfig;
     KSharedConfigPtr kwinConfig;
+    KSharedConfigPtr kdeGtkConfig;
 
     QTemporaryDir generatedCSDTempPath;
 };
diff --git a/kded/gtkconfig.cpp b/kded/gtkconfig.cpp
index 8bc5ea2..0ad0d19 100644
--- a/kded/gtkconfig.cpp
+++ b/kded/gtkconfig.cpp
@@ -19,6 +19,7 @@
 
 #include <algorithm>
 #include <cmath>
+#include <qstringliteral.h>
 
 #include "config_editor/custom_css.h"
 #include "config_editor/gsettings.h"
@@ -26,6 +27,7 @@
 #include "config_editor/settings_ini.h"
 #include "config_editor/xsettings.h"
 #include "gsd-xsettings-manager/gsd-xsettings-manager.h"
+#include "gtkconfig-debug.h"
 
 K_PLUGIN_CLASS_WITH_JSON(GtkConfig, "gtkconfig.json")
 
@@ -38,7 +40,14 @@ GtkConfig::GtkConfig(QObject *parent, const QVariantList &)
     , kcmfontsConfigWatcher(KConfigWatcher::create(KSharedConfig::openConfig(QStringLiteral("kcmfonts"))))
     , kcminputConfigWatcher(KConfigWatcher::create(KSharedConfig::openConfig(QStringLiteral("kcminputrc"))))
     , breezeConfigWatcher(KConfigWatcher::create(KSharedConfig::openConfig(QStringLiteral("breezerc"))))
+    , kdegtkConfigWatcher(KConfigWatcher::create(KSharedConfig::openConfig(QStringLiteral("kdegtkrc"), KConfig::NoGlobals)))
 {
+    QLoggingCategory::setFilterRules(
+        "*.debug=false\n"
+        "gtkconfig.debug=true");
+
+    qCDebug(LOG_GTKCONFIG) << "Start GtkConfig KDED";
+
     QDBusConnection dbus = QDBusConnection::sessionBus();
     dbus.registerService(QStringLiteral("org.kde.GtkConfig"));
     dbus.registerObject(QStringLiteral("/GtkConfig"), this, QDBusConnection::ExportScriptableSlots);
@@ -52,6 +61,7 @@ GtkConfig::GtkConfig(QObject *parent, const QVariantList &)
     connect(kcmfontsConfigWatcher.data(), &KConfigWatcher::configChanged, this, &GtkConfig::onKCMFontsSettingsChange);
     connect(kcminputConfigWatcher.data(), &KConfigWatcher::configChanged, this, &GtkConfig::onKCMInputSettingsChange);
     connect(breezeConfigWatcher.data(), &KConfigWatcher::configChanged, this, &GtkConfig::onBreezeSettingsChange);
+    connect(kdegtkConfigWatcher.data(), &KConfigWatcher::configChanged, this, &GtkConfig::onKdeGtkSettingsChange);
 
     Gtk2ConfigEditor::removeLegacyStrings();
     applyAllSettings();
@@ -271,10 +281,21 @@ void GtkConfig::setTextScale() const
         waylandTextScaleFactor = std::clamp(waylandTextScaleFactor, 0.5, 3.0);
     }
 
+    double textScalingFactor = waylandTextScaleFactor;
+    const double textScalingFactorConfigValue = configValueProvider->textScalingFactor();
+
+    qCDebug(LOG_GTKCONFIG) << "textScalingFactorConfigValue:" << textScalingFactorConfigValue;
+
+    if (!(configValueProvider->syncedOptions().value(QStringLiteral("TextScale"))) && textScalingFactorConfigValue != 0) {
+        textScalingFactor = textScalingFactorConfigValue;
+    }
+
+    qCDebug(LOG_GTKCONFIG) << "textScalingFactor:" << textScalingFactor;
+
     XSettingsEditor::unsetValue(QStringLiteral("Xft/DPI"));
     SettingsIniEditor::setValue(QStringLiteral("gtk-xft-dpi"), x11TextDpiAbsolute);
     XSettingsEditor::setValue(QStringLiteral("Gdk/UnscaledDPI"), x11TextDpiAbsolute / x11ScaleIntegerPart);
-    GSettingsEditor::setValue("text-scaling-factor", waylandTextScaleFactor);
+    GSettingsEditor::setValue("text-scaling-factor", std::round(textScalingFactor * 100) / 100); // FIXME:Double precise
 }
 
 void GtkConfig::setColors() const
@@ -410,6 +431,15 @@ void GtkConfig::onBreezeSettingsChange(const KConfigGroup &group, const QByteArr
     }
 }
 
+void GtkConfig::onKdeGtkSettingsChange(const KConfigGroup &group, const QByteArrayList &names) const
+{
+    if ((group.name() == QStringLiteral("General")) || group.name() == QStringLiteral("Options")) {
+        if (names.contains("TextScale")) {
+            setTextScale();
+        }
+    }
+}
+
 #include "gtkconfig.moc"
 
 #include "moc_gtkconfig.cpp"
diff --git a/kded/gtkconfig.h b/kded/gtkconfig.h
index 9901488..c2afa28 100644
--- a/kded/gtkconfig.h
+++ b/kded/gtkconfig.h
@@ -55,6 +55,7 @@ public Q_SLOTS:
     void onKCMFontsSettingsChange(const KConfigGroup &group, const QByteArrayList &names) const;
     void onKCMInputSettingsChange(const KConfigGroup &group, const QByteArrayList &names) const;
     void onBreezeSettingsChange(const KConfigGroup &group, const QByteArrayList &names) const;
+    void onKdeGtkSettingsChange(const KConfigGroup &group, const QByteArrayList &names) const;
 
 private:
     QScopedPointer<ConfigValueProvider> configValueProvider;
@@ -64,6 +65,7 @@ private:
     KConfigWatcher::Ptr kcmfontsConfigWatcher;
     KConfigWatcher::Ptr kcminputConfigWatcher;
     KConfigWatcher::Ptr breezeConfigWatcher;
+    KConfigWatcher::Ptr kdegtkConfigWatcher;
     void setGtk2Theme(const QString &themeName, const bool preferDarkTheme) const;
 
     GSDXSettingsManager *m_gsdXsettingsManager = nullptr;
-- 
2.46.0

