pkgbase=linux-orangepi-3b
pkgver=6.6
pkgrel=2
_newversion=false
_stopbuild=false # Will also stop if ${_newversion} is true
_srcname="linux-${pkgver/%.0/}"
_kernelname="${pkgbase#linux}"
_desc="AArch64 multi-platform"
arch=('aarch64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'git' 'dtc' 'cpio')
options=('!strip')
source=("${_srcname}.tar.gz::https://cdn.kernel.org/pub/linux/kernel/v6.x/${_srcname}.tar.gz"
	'1001-arm64-dts-rockchip-add-opi3b.patch'
	'1002-net-wireless-uwe5622-driver.patch'
	'config'
	'linux.preset')
sha256sums=('3c88ff4648122e81832b7067be6456ef28e119b64649a29e84f7f04691e489f9'
            'fe2bcc1b54c2d033e69d99234f1c480b44ff08b9921a1572746f5b745394d924'
            '7c4c7a29c9aff64297c7e7a0d4189ea858d9a8fa94b807d1d0329bcf296286a8'
            'd96360a0c23084bbc4a845ada82189ed47d1f1ed25600708f35678af21d5abec'
            '66644820faa950a5fc59181f5aefcbed6d7ed652b29aee69979a2be2a032025d')

prepare() {
	apply_patches() {
		local PATCH
		for PATCH in "${source[@]}"; do
			PATCH="${PATCH%%::*}"
			PATCH="${PATCH##*/}"
			[[ ${PATCH} = $1*.patch ]] || continue
			msg2 "Applying patch: ${PATCH}..."
			patch -N -p1 <"../${PATCH}"
		done
	}

	cd ${_srcname}

	# Assorted Manjaro ARM patches
	apply_patches 1

	apply_patches 2

	# Apply our kernel configuration
	cat "${srcdir}/config" >.config

	# Add pkgrel to extraversion
	sed -ri "s|^(EXTRAVERSION =)(.*)|\1 \2-${pkgrel}|" Makefile

	# Don't run depmod on "make install", we'll do that ourselves in packaging
	sed -i '2iexit 0' scripts/depmod.sh
}

build() {
	cd ${_srcname}

	# Get the kernel version
	if [[ "${_newversion}" = false ]]; then
		make prepare
	fi

	# Configure the kernel; adjust the line below to your choice
	# or simply manually edit the ".config" file
	if [[ "${_newversion}" = true ]]; then
		make menuconfig # CLI menu for configuration
	fi
	#make nconfig       # New CLI menu for configuration
	#make xconfig       # X-based configuration
	#make oldconfig     # Using old config from previous kernel version

	# Stash the configuration (use with new major kernel version)
	if [[ "${_newversion}" = true ]]; then
		cp ./.config /var/tmp/${pkgbase}.config
		cp ./.config "${srcdir}/config"
	fi

	# Stop here, which is useful to configure the kernel
	if [[ "${_newversion}" = true || "${_stopbuild}" = true ]]; then
		msg "Stopping build"
		return 1
	fi

	# Enable to create an all-inclusive build
	#yes "" | make config

	# Build the kernel and the modules
	unset LDFLAGS
	make ${MAKEFLAGS} Image modules

	# Generate device tree blobs with symbols to support
	# applying device tree overlays in U-Boot
	make ${MAKEFLAGS} DTC_FLAGS="-@" dtbs
}

_package() {
	pkgdesc="The Linux Kernel and modules - ${_desc}"
	depends=('coreutils' 'kmod' 'initramfs')
	optdepends=('crda: to set the correct wireless channels of your country'
		'linux-firmware: additional firmware')
	provides=('kernel26' "linux=${pkgver}")
	conflicts=('kernel26' 'linux')
	replaces=('linux-armv8' 'linux-aarch64')
	backup=("etc/mkinitcpio.d/${pkgbase}.preset")
	install=${pkgname}.install

	cd ${_srcname}

	KARCH=arm64

	# get kernel version
	_kernver="$(make kernelrelease)"
	_basekernel=${_kernver%%-*}
	_basekernel=${_basekernel%.*}

	mkdir -p "${pkgdir}"/{boot,usr/lib/modules}
	make INSTALL_MOD_PATH="${pkgdir}/usr" modules_install

	# Install DTBs, not to target pkgdir, but in srcdir, so the later package() routine could use them
	make INSTALL_DTBS_PATH="${srcdir}/dtbs" dtbs_install

	# Install DTBs to target pkgdir
	# Create separate directory for each kernel to avoid conflicts
	install -d "${pkgdir}/boot/dtbs/${pkgbase}/"
	install -Dm644 "${srcdir}/dtbs/rockchip/rk3566-orangepi-3b.dts" "${pkgdir}/boot/dtbs/${pkgbase}/"

	# Install kernel image (vmlinuz)
	local _dir_module="${pkgdir}/usr/lib/modules/$(<version)"
	install -Dm644 "arch/$KARCH/boot/Image" "${_dir_module}/vmlinuz"

	# make room for external modules
	local _extramodules="extramodules-${_basekernel}${_kernelname}"
	ln -s "../${_extramodules}" "${pkgdir}/usr/lib/modules/${_kernver}/extramodules"

	# add real version for building modules and running depmod from hook
	echo "${_kernver}" |
		install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/${_extramodules}/version"

	# remove build and source links
	rm "${pkgdir}"/usr/lib/modules/${_kernver}/build

	# now we call depmod...
	depmod -b "${pkgdir}/usr" -F System.map "${_kernver}"

	# sed expression for following substitutions
	local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|${_kernver}|g
    s|%EXTRAMODULES%|${_extramodules}|g
  "

	# install mkinitcpio preset file
	sed "${_subst}" ../linux.preset |
		install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"
}

_package-headers() {
	pkgdesc="Header files and scripts for building modules for linux kernel - ${_desc}"
	provides=("linux-headers=${pkgver}")
	conflicts=('linux-headers')
	replaces=('linux-aarch64-headers')

	cd ${_srcname}
	local _builddir="${pkgdir}/usr/lib/modules/${_kernver}/build"

	install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
	install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

	mkdir "${_builddir}/.tmp_versions"

	cp -t "${_builddir}" -a include scripts

	install -Dt "${_builddir}/arch/${KARCH}" -m644 arch/${KARCH}/Makefile
	install -Dt "${_builddir}/arch/${KARCH}/kernel" -m644 arch/${KARCH}/kernel/asm-offsets.s
	install -Dt "${_builddir}" -m644 vmlinux

	cp -t "${_builddir}/arch/${KARCH}" -a arch/${KARCH}/include
	mkdir -p "${_builddir}/arch/arm"
	cp -t "${_builddir}/arch/arm" -a arch/arm/include

	install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
	install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

	# http://bugs.archlinux.org/task/13146
	install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

	# http://bugs.archlinux.org/task/20402
	install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
	install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
	install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

	# add xfs and shmem for aufs building
	mkdir -p "${_builddir}"/{fs/xfs,mm}

	# copy in Kconfig files
	find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

	# remove unneeded architectures
	local _arch
	for _arch in "${_builddir}"/arch/*/; do
		[[ ${_arch} == */${KARCH}/ || ${_arch} == */arm/ ]] && continue
		rm -r "${_arch}"
	done

	# remove documentation files
	rm -r "${_builddir}/Documentation"

	# remove now broken symlinks
	find -L "${_builddir}" -type l -printf 'Removing %P\n' -delete

	# strip scripts directory
	local file
	while read -rd '' file; do
		case "$(file -bi "$file")" in
		application/x-sharedlib\;*) # Libraries (.so)
			${CROSS_COMPILE}strip $STRIP_SHARED "$file" ;;
		application/x-archive\;*) # Libraries (.a)
			${CROSS_COMPILE}strip $STRIP_STATIC "$file" ;;
		application/x-executable\;*) # Binaries
			${CROSS_COMPILE}strip $STRIP_BINARIES "$file" ;;
		application/x-pie-executable\;*) # Relocatable binaries
			${CROSS_COMPILE}strip $STRIP_SHARED "$file" ;;
		esac
	done < <(find "${_builddir}" -type f -perm -u+x ! -name vmlinux -print0 2>/dev/null)
	${CROSS_COMPILE}strip $STRIP_STATIC "${_builddir}/vmlinux"

	# remove unwanted files
	find ${_builddir} -name '*.orig' -delete
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in ${pkgname[@]}; do
	eval "package_${_p}() {
    _package${_p#${pkgbase}}
  }"
done
